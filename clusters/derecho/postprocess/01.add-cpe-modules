#!/bin/bash
#
#   Unit: add-cpe-modules
#   Description:
#       This postprocessing unit copies and modifies Cray Lmod modules into our
#       tree as the modules generated by Spack would not be sufficient (and
#       many packages are not tracked in Spack at all.
#
#   Author:         Brian Vanderwende
#   Last Revised:   10:27, 24 Dec 2024
#

#
##  UNIT DEPENDENCIES
#

. $POSTPROCESS_UNIT_DIR/cpe.helper

#
##  USER INPUT
#

# This script will loop through these options for module porting
compilers="cce gcc nvhpc oneapi intel"
mpis="cray-mpich"

# Specify core modules to import into the Spack module tree
core="  craype/2.7.31
        cce/17.0.1
        perftools-base/24.03.0
        atp/3.15.3
        cray-ccdb/5.0.3
        cray-dyninst/12.3.1
        cray-stat/4.12.2
        gdb4hpc/4.16.1
        cray-mrnet/5.1.2
        papi/7.1.0.1
        sanitizers4hpc/1.1.2
        valgrind4hpc/2.13.2"

# Specify compiler-dependent modules to import into the Spack module tree
cdep="  cray-libsci/24.03.0
        cray-mpich/8.1.29"

# Specify mpi-dependent modules to import into the Spack module tree
mdep="  cray-mpixlate/1.0.2"

#
##  FUNCTION DEFINITIONS
#

function modify_comp {
sed -i '/--.*Lmod hierarchy/Q; /pend_path[ ("]*MODULEPATH/d' $1
cat >> $1 << EOF
-- Find custom moduleroots
local mroot_vars = os.getenv("__NCAR_VARS_MODULEROOT")

if mroot_vars then
    for var in string.gmatch(mroot_vars, "[^:]+") do
        local mroot = os.getenv("__" .. var)

        if mroot then
            append_path("MODULEPATH", pathJoin(mroot, "$mod"))
        end
    end
end

-- Add compiler-dependent modules to MODULEPATH
append_path("MODULEPATH", "${MOD_DEPLOYMENT}/$mod")

-- Set the PE, since this is the only setting from the PrgEnv module that matters
setenv("PE_ENV", "${comp_pe[$mod_name]}")

-- Set NCAR build environment variables
local my_ncar_id    = "$mod_name-$mod_version"
local my_ncar_env   = "$NCAR_SPACK_HOST-" .. my_ncar_id

setenv("NCAR_ID_COMPILER",          my_ncar_id)
setenv("NCAR_BUILD_ENV_COMPILER",   my_ncar_env)
setenv("NCAR_BUILD_ENV",            my_ncar_env)

EOF

if [[ $mod_name == cce ]]; then
cat >> $1 << EOF
setenv("NCAR_ROOT_CCE",             CCE_M_CURPATH)
setenv("NCAR_ROOT_COMPILER",        CCE_M_CURPATH)

-- Always try loading cray-libsci, since crayftn will use it (but not link!)
depends_on("cray-libsci")
EOF

if [[ ${mod_version%%.*} -ge 17 ]]; then
# Apparently this is always needed, even if we LIBRARY_PATH the compiler libs
cat >> $1 << EOF

-- We need a newer GCC toolchain to use newer cray-mpich
setenv("NCAR_MFLAGS_COMPILER", "--gcc-toolchain=$core_gcc_root")
EOF
fi
elif [[ $mod_name == gcc ]]; then
cat >> $1 << EOF
setenv("NCAR_ROOT_GCC",             PE_DIR)
setenv("NCAR_ROOT_COMPILER",        PE_DIR)
EOF
fi
}

function modify_mpi {
mpich_cpe=$(get_cpe_version $mod_name $mod_version)
pals_version=$(get_package_version $mpich_cpe pals)
pmi_version=$(get_package_version $mpich_cpe pmi)
cti_version=$(get_package_version $mpich_cpe cti)

if [[ $log_me != no ]]; then
tsecho "    using CPE=$mpich_cpe, PALS=$pals_version, PMI=$pmi_version, CTI=$cti_version"
log_me=no
fi

# CUDA 12 is not supported by 8.1.25
if [[ $mod_version == 8.1.25 ]]; then
    cuda_dependency='between("cuda","1.0","<12.0")'
else
    cuda_dependency='"cuda"'
fi

sed -i '/--.*Lmod hierarchy/Q; /pend_path[ ("]*MODULEPATH/d' $1
cat >> $1 << EOF
-- Use separate libfabric module now
depends_on("libfabric")

-- Find custom moduleroots
local mroot_vars = os.getenv("__NCAR_VARS_MODULEROOT")

if mroot_vars then
    for var in string.gmatch(mroot_vars, "[^:]+") do
        local mroot = os.getenv("__" .. var)

        if mroot then
            append_path("MODULEPATH", pathJoin(mroot, "$mod", "$comp"))
        end
    end
end

-- Add MPI-dependent modules to MODULEPATH
append_path("MODULEPATH", "${MOD_DEPLOYMENT}/${mod}/$comp")

-- Use openfabrics
setenv("CRAYPE_NETWORK_TARGET", "$cray_network")

-- Add to LD_LIBRARY_PATH for programs like NSight Systems
prepend_path("LD_LIBRARY_PATH", MPICH_DIR .. "/lib")

-- PALS support
local PALS_DIR = "/opt/cray/pe/pals/${pals_version}"
prepend_path("PATH", PALS_DIR .. "/bin")
prepend_path("MANPATH", PALS_DIR .. "/man")
prepend_path("PKG_CONFIG_PATH", PALS_DIR .. "/lib/pkgconfig")
prepend_path("PE_PALS_PKGCONFIG_LIBS", "libpals")
prepend_path("PE_PKGCONFIG_PRODUCTS", "PE_PALS")
set_alias("mpirun", "mpiexec")

-- PMI support
local PMI_DIR = "/opt/cray/pe/pmi/${pmi_version}"
setenv("CRAY_PMI_INCLUDE_OPTS", "-I" .. PMI_DIR .. "/include")
setenv("CRAY_PMI_POST_LINK_OPTS", "-L" .. PMI_DIR .. "/lib")
prepend_path("PKG_CONFIG_PATH", PMI_DIR .. "/lib/pkgconfig")
prepend_path("PE_PKGCONFIG_PRODUCTS", "PE_PMI")
prepend_path("PE_PMI_PKGCONFIG_LIBS", "cray-pmi")
prepend_path("MANPATH", PMI_DIR .. "/man")
prepend_path("CRAY_LD_LIBRARY_PATH", PMI_DIR .. "/lib")
prepend_path("LD_LIBRARY_PATH",      PMI_DIR .. "/lib")

-- Cray CTI configuration (Forge support)
local CTI_DIR = "/opt/cray/pe/cti/${cti_version}"
setenv("CTI_VERSION",        "${cti_version}")
setenv("CRAY_CTI_VERSION",   "${cti_version}")
setenv("CTI_INSTALL_DIR",    CTI_DIR)
setenv("CRAY_CTI_PREFIX",    CTI_DIR)
setenv("PE_CTI_MODULE_NAME", "cray-cti")

prepend_path("MANPATH",              CTI_DIR .. "/share/man")
prepend_path("CRAY_LD_LIBRARY_PATH", CTI_DIR .. "/lib")
prepend_path("LD_LIBRARY_PATH",      CTI_DIR .. "/lib")

-- If wrapper is loaded, make sure mpi wrappers are removed at unload
local wrapper_path = os.getenv("NCAR_WRAPPER_MPI_PATH")

if wrapper_path then
    prepend_path("PATH", wrapper_path)
end

-- Set NCAR build environment variables
local my_ncar_id    = "$mod_name-$mod_version"
local my_ncar_env   = "$NCAR_SPACK_HOST-$comp_name-$comp_version-" .. my_ncar_id

setenv("NCAR_ID_MPI",           my_ncar_id)
setenv("NCAR_BUILD_ENV_MPI",    my_ncar_env)
pushenv("NCAR_BUILD_ENV",       my_ncar_env)
setenv("NCAR_ROOT_CRAY_MPICH",  MPICH_DIR)
setenv("NCAR_ROOT_MPI",         MPICH_DIR)

-- If GPUs available, depend on CUDA
local num_gpus = os.getenv("NGPUS")
if num_gpus and tonumber(num_gpus) > 0 then
    depends_on($cuda_dependency)
end

-- HPE suggests this setting to reduce RPC launch timeouts
setenv("PALS_FANOUT", "32")
EOF

if [[ $comp_name != gcc ]] && [[ ${mod_version//.} -ge 8129 ]] && [[ $cpe_needs_gcc -gt $core_gcc_major ]]; then
cat >> $1 << EOF

-- We need a newer GCC toolchain to use newer cray-mpich
depends_on(atleast("gcc-toolchain", "12.0.0"))
EOF
fi
}

function modify_craype {
cat >> $1 << EOF

-- CPU architecture specification 
prepend_path("PE_PRODUCT_LIST", "CRAYPE_X86_MILAN")
setenv("CRAY_CPU_TARGET", "x86-milan")

-- If ncarcompilers is loaded, reload it to keep forward
if isloaded("ncarcompilers") then
    always_load("ncarcompilers")
end

-- Make sure Cray software is RPATH'd to ensure version consistency
setenv("CRAY_ADD_RPATH", "yes") 

-- Suggest that Kokkos wrapper use Cray wrapper
setenv("NVCC_WRAPPER_DEFAULT_COMPILER", "CC")
EOF
}

function modify_libsci {
cat >> $1 << EOF

-- Set family to indicate math routines
family("mathpack")
EOF

if [[ $comp_name != gcc ]] && [[ ${mod_version%%.*} -ge 24 ]] && [[ $cpe_needs_gcc -gt $core_gcc_major ]]; then
cat >> $1 << EOF

-- We need a newer GCC toolchain to use newer cray-libsci
depends_on(atleast("gcc-toolchain", "12.0.0"))
EOF
fi
}

function set_dependency {
    pr_line=$(grep -nh -B1 craype $1 | grep 'prereq.*(' | awk -F[:-] '{print $1}')

    if [[ -n $pr_line ]]; then
        sed -i "$pr_line s/prereq/depends_on/" $1
    else
        add_dependency $1
    fi

    unset pr_line
}

function add_dependency {
cat >> $1 << EOF

-- Module depends on Cray Compiler Drivers for proper function
depends_on("craype")
EOF
}

function add_conflicts {
    mod_file=$1
    shift
    echo -e "\n-- Module cannot be loaded when these modules are loaded" >> $mod_file

    while [[ $# -ge 1 ]]; do
        echo "conflict(\"$1\")" >> $mod_file
        shift
    done
}

function reverse_mods {
    sed -i '/MODULEPATH/ s/^prepend_path/append_path/' $1
}

function get_module_file {
    if [[ -n $comp_name ]]; then
        result=$(find /opt/cray/pe/lmod -wholename "*/${comp_dep[$comp_name]}/*/${mod}*")
    fi
    
    if [[ -z $result ]]; then
        result=$(find /opt/cray/pe/lmod -wholename "*/${mod}*")
    fi

    if [[ -n $result ]]; then
        echo $result
    else
        tsecho "Error: modulefile not found for $mod"
        exit 1
    fi
}

function copy_mods {
    mod_list=(${!1})
    for mod_entry in ${mod_list[@]}; do
        log_me=yes
        mod=${mod_entry/(D)}
        mod_name=${mod%/*}
        mod_version=${mod#*/}
        tsecho "Package: $GCOL$mod$DCOL"
        
        if [[ $1 == cdep ]]; then
            for comp in $comp_list; do
                comp_name=${comp%/*}
                comp_version=${comp#*/}
                src_file=$(get_module_file)

                if [[ $src_file == */${comp_dep[$comp_name]}/* ]]; then
                    src_compat=$(sed "s|.*${comp_dep[$comp_name]}/\([^./]*\).*|\1|" <<< $src_file)
                    
                    if [[ $src_compat -gt ${comp_version%%.*} ]]; then
                        continue
                    fi
                fi

                if [[ $mod_name == cray-mpich ]]; then
                    if [[ ! -d $MOD_DEPLOYMENT/$mod/$comp ]]; then
                        rm -f $MOD_DEPLOYMENT/$comp/${mod}.lua
                        continue
                    fi
                fi

                if [[ -n ${comp_skip[$comp]} ]] && [[ " ${comp_skip[$comp]} " == *" $mod "* ]]; then
                    rm -f $MOD_DEPLOYMENT/$comp/${mod}.lua
                    continue
                elif [[ -n ${comp_skip[$comp_name]} ]] && [[ " ${comp_skip[$comp_name]} " == *" $mod "* ]]; then
                    rm -f $MOD_DEPLOYMENT/$comp/${mod}.lua
                    continue
                fi

                mod_path=$MOD_DEPLOYMENT/$comp
                mkdir -p $mod_path/$mod_name
                tsecho "    copying module from ${PCOL}${src_file}$DCOL (${PCOL}comp=$comp$DCOL)"
                cp $src_file $mod_path/$mod_name

                if [[ $mod != $mod_entry ]]; then
                    ln -sf ${mod_version}.lua $mod_path/$mod_name/default
                fi

                if [[ " $mpis " == *" $mod_name "* ]]; then
                    modify_mpi $mod_path/${mod}.lua
                    tsecho "    modified $GCOL$mod$DCOL (${PCOL}compat=$src_compat$DCOL) for use as MPI library"
                elif [[ $mod_name == cray-libsci ]]; then
                    modify_libsci $mod_path/${mod}.lua
                fi
                
                set_dependency $mod_path/${mod}.lua
                unset comp_name comp_version
            done
        else
            src_file=$(get_module_file)
            mod_path=$MOD_DEPLOYMENT/Core
            mkdir -p $mod_path/$mod_name
            cp $src_file $mod_path/$mod_name
            tsecho "    copying module from ${PCOL}${src_file}$DCOL"

            if [[ $mod != $mod_entry ]]; then
                ln -sf ${mod_version}.lua $mod_path/$mod_name/default
            fi

            if [[ " $compilers " == *" $mod_name "* ]]; then
                tsecho "    modified $GCOL$mod$DCOL for use as compiler"
                modify_comp $mod_path/${mod}.lua
            else
                case $mod_name in
                    craype)
                        modify_craype $mod_path/${mod}.lua
                        ;;
                    perftools-base)
                        reverse_mods $mod_path/${mod}.lua
                        ;;
                    atp)
                        add_conflicts $mod_path/${mod}.lua linaro-forge
                        ;;
                esac
            fi

            if [[ " $compilers craype " != *" $mod_name "* ]]; then
                set_dependency $mod_path/${mod}.lua
            fi
        fi
    done
}

#
##  BEGIN CRAY PROGRAMMING ENVIRONMENT INTEGRATION
#

tsecho "Copying core modules to $MOD_ROOT"

# Get current core GCC major version for compat checks
core_gcc_major=$(sed 's/.*@\([^.]*\).*/\1/' <<< $NCAR_SPACK_CORE_GCC)
core_gcc_root=$(spack location -i $NCAR_SPACK_CORE_GCC)

declare -A comp_pe
comp_pe[cce]=CRAY
comp_pe[gcc]=GNU
comp_pe[nvhpc]=NVIDIA
comp_pe[intel]=INTEL

declare -A comp_dep
comp_dep[cce]=crayclang
comp_dep[gcc]=gnu
comp_dep[nvhpc]=nvidia
comp_dep[intel]=intel
comp_dep[oneapi]=intel

declare -A comp_skip
comp_skip[intel/2021.7.1]=cray-libsci/22.11.1.2
comp_skip[intel]=cray-libsci/23.02.1.1
comp_skip[cce/16.0.1]=cray-libsci/24.03.0
comp_skip[cce/17.0.1]="cray-libsci/23.02.1.1 cray-libsci/23.09.1.1"

copy_mods core

tsecho "Searching for installed compilers"

cd $MOD_DEPLOYMENT

for comp in $compilers; do
    comp_list="$comp_list $(ls -d $comp/* --color=never 2> /dev/null || true)"
done

tsecho "Copying cdep modules to $MOD_ROOT"
copy_mods cdep
