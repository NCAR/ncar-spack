#!/bin/bash
#
#   This script copies relevant modules from the crayenv
#   container environment into a curated tree
#

# Perform common script setup including environment checks
export my_dir="$( cd "$(dirname "$0")" ; pwd )"
. $my_dir/tools/init.sh

# CONFIGURABLES
core_gcc=gcc@7.5.0
compilers="cce gcc nvhpc oneapi intel"
mpis="cray-mpich"
cray_network=ofi

ofi_version=$(basename $(ls -1 -d --color=never /opt/cray/libfabric/* | tail -1))
core="  craype/2.7.23
        cce/16.0.1
        gcc/12.2.0
        perftools-base/23.09.0
        atp/3.15.1
        cray-ccdb/5.0.1
        cray-dyninst/12.3.0
        cray-stat/4.12.1
        gdb4hpc/4.15.1
        cray-mrnet/5.1.1
        papi/7.0.1.1
        sanitizers4hpc/1.1.1
        valgrind4hpc/2.13.1"
cdep="  cray-libsci/23.09.1.1
        cray-mpich/8.1.27"
mdep="  cray-mpixlate/1.0.2"

hide_list=" */*/openmpi/* */*/mvapich/* */*/vasp/* */*/intel-mpi/* */*/mpich/* */libtorch/*"


if [[ $NCAR_SPACK_ENV_TYPE == public ]]; then
    mod_root=$NCAR_SPACK_ROOT_MODULES
    base_root=$NCAR_SPACK_ROOT_BASE
else
    mod_root=$SPACK_ENV/modules
    base_root=$SPACK_ENV
fi

mod_deployment=${mod_root}/$NCAR_SPACK_HOST_VERSION

while [[ $# -gt 0 ]]; do
    case $1 in
        -c|--clean)
            spack_flags=--delete-tree
            ;;
    esac

    shift
done

# First, let's make sure module tree exists
if [[ ! -d $mod_deployment ]] || [[ -n $spack_flags ]]; then
    spack module lmod refresh -y --upstream-modules $spack_flags
fi

# Then, let's make sure utils and localrc exist
tsecho "Refreshing module init scripts"
. $my_dir/tools/make_localinit.sh ${NCAR_SPACK_ENV_TYPE:-build}

# ===== CRAY PROGRAMMING ENVIRONMENT INTEGRATION =====

function get_cpe_version {
    for cpe in $cpe_versions; do
        def_file=/opt/cray/pe/cpe/${cpe}/set_default_release_${cpe}.sh

        for my_name in $1 ${1#cray-}; do 
            if grep -q default_${my_name}_${2}$ $def_file; then
                echo $cpe
                return
            fi
        done
    done

    tsecho "Error: version $2 of $1 not found in any CPE release"
    exit 1
}

function get_package_version {
    my_cpe_versions=$(sed "s/.*\($1.*\)/\1/" <<< $cpe_versions)

    for cpe in $my_cpe_versions; do
        def_file=/opt/cray/pe/cpe/$cpe/set_default_release_$cpe.sh

        for my_name in $2 ${2#cray-}; do
            my_version=$(sed -n "s/.*${my_name}_\([0-9.]*\)$/\1/p" $def_file)

            if [[ -n $my_version ]]; then
                echo $my_version
                return
            fi
        done

        if [[ $3 == strict ]]; then
            tsecho "Error: package $2 not found in CPE $cpe"
            exit 1
        fi
    done

    tsecho "Error: package $2 not found in any CPE release"
    exit 1
}

function modify_comp {
sed -i '/--.*Lmod hierarchy/Q; /pend_path[ ("]*MODULEPATH/d' $1
cat >> $1 << EOF
-- Find custom moduleroots
local mroot_vars = os.getenv("__NCAR_VARS_MODULEROOT")

if mroot_vars then
    for var in string.gmatch(mroot_vars, "[^:]+") do
        local mroot = os.getenv("__" .. var)

        if mroot then
            append_path("MODULEPATH", pathJoin(mroot, "$mod"))
        end
    end
end

-- Add compiler-dependent modules to MODULEPATH
append_path("MODULEPATH", "${mod_deployment}/$mod")

-- Set the PE, since this is the only setting from the PrgEnv module that matters
setenv("PE_ENV", "${comp_pe[$mod_name]}")

-- Set NCAR build environment variables
local my_ncar_id    = "$mod_name-$mod_version"
local my_ncar_env   = "$NCAR_SPACK_HOST-" .. my_ncar_id

setenv("NCAR_ID_COMPILER",          my_ncar_id)
setenv("NCAR_BUILD_ENV_COMPILER",   my_ncar_env)
setenv("NCAR_BUILD_ENV",            my_ncar_env)
EOF

if [[ $mod_name == cce ]]; then
cat >> $1 << EOF
setenv("NCAR_ROOT_CCE",             CCE_M_CURPATH)
setenv("NCAR_ROOT_COMPILER",        CCE_M_CURPATH)

-- Always try loading cray-libsci, since crayftn will use it (but not link!)
depends_on("cray-libsci")
EOF
elif [[ $mod_name == gcc ]]; then
cat >> $1 << EOF
setenv("NCAR_ROOT_GCC",             PE_DIR)
setenv("NCAR_ROOT_COMPILER",        PE_DIR)
EOF
fi
}

function modify_mpi {
mpich_cpe=$(get_cpe_version $mod_name $mod_version)
pals_version=$(get_package_version $mpich_cpe pals)
pmi_version=$(get_package_version $mpich_cpe pmi)
cti_version=$(get_package_version $mpich_cpe cti)

if [[ $log_me != no ]]; then
tsecho "    using CPE=$mpich_cpe, PALS=$pals_version, PMI=$pmi_version, CTI=$cti_version"
log_me=no
fi

# CUDA 12 is not supported by 8.1.25
if [[ $mod_version == 8.1.25 ]]; then
    cuda_dependency='between("cuda","1.0","<12.0")'
else
    cuda_dependency='"cuda"'
fi

sed -i '/--.*Lmod hierarchy/Q; /pend_path[ ("]*MODULEPATH/d' $1
cat >> $1 << EOF
-- Find custom moduleroots
local mroot_vars = os.getenv("__NCAR_VARS_MODULEROOT")

if mroot_vars then
    for var in string.gmatch(mroot_vars, "[^:]+") do
        local mroot = os.getenv("__" .. var)

        if mroot then
            append_path("MODULEPATH", pathJoin(mroot, "$mod", "$comp"))
        end
    end
end

-- Add MPI-dependent modules to MODULEPATH
append_path("MODULEPATH", "${mod_deployment}/${mod}/$comp")

-- Use openfabrics
setenv("CRAYPE_NETWORK_TARGET", "$cray_network")

-- Add to LD_LIBRARY_PATH for programs like NSight Systems
prepend_path("LD_LIBRARY_PATH", MPICH_DIR .. "/lib")

-- Libfabric settings
local OFI_DIR = "/opt/cray/libfabric/${ofi_version}"
prepend_path("PATH", OFI_DIR .. "/bin")
prepend_path("LD_LIBRARY_PATH", OFI_DIR .. "/lib64")
prepend_path("MANPATH", OFI_DIR .. "/share/man")
prepend_path("PKG_CONFIG_PATH", OFI_DIR .. "/lib64/pkgconfig")

-- PALS support
local PALS_DIR = "/opt/cray/pe/pals/${pals_version}"
prepend_path("PATH", PALS_DIR .. "/bin")
prepend_path("MANPATH", PALS_DIR .. "/man")
prepend_path("PKG_CONFIG_PATH", PALS_DIR .. "/lib/pkgconfig")
prepend_path("PE_PALS_PKGCONFIG_LIBS", "libpals")
prepend_path("PE_PKGCONFIG_PRODUCTS", "PE_PALS")
set_alias("mpirun", "mpiexec")

-- PMI support
local PMI_DIR = "/opt/cray/pe/pmi/${pmi_version}"
setenv("CRAY_PMI_INCLUDE_OPTS", "-I" .. PMI_DIR .. "/include")
setenv("CRAY_PMI_POST_LINK_OPTS", "-L" .. PMI_DIR .. "/lib")
prepend_path("PKG_CONFIG_PATH", PMI_DIR .. "/lib/pkgconfig")
prepend_path("PE_PKGCONFIG_PRODUCTS", "PE_PMI")
prepend_path("PE_PMI_PKGCONFIG_LIBS", "cray-pmi")
prepend_path("MANPATH", PMI_DIR .. "/man")
prepend_path("CRAY_LD_LIBRARY_PATH", PMI_DIR .. "/lib")
prepend_path("LD_LIBRARY_PATH",      PMI_DIR .. "/lib")

-- Cray CTI configuration (Forge support)
local CTI_DIR = "/opt/cray/pe/cti/${cti_version}"
setenv("CTI_VERSION",        "${cti_version}")
setenv("CRAY_CTI_VERSION",   "${cti_version}")
setenv("CTI_INSTALL_DIR",    CTI_DIR)
setenv("CRAY_CTI_PREFIX",    CTI_DIR)
setenv("PE_CTI_MODULE_NAME", "cray-cti")

prepend_path("MANPATH",              CTI_DIR .. "/share/man")
prepend_path("CRAY_LD_LIBRARY_PATH", CTI_DIR .. "/lib")
prepend_path("LD_LIBRARY_PATH",      CTI_DIR .. "/lib")

-- If wrapper is loaded, make sure mpi wrappers are removed at unload
local wrapper_path = os.getenv("NCAR_WRAPPER_MPI_PATH")

if wrapper_path then
    prepend_path("PATH", wrapper_path)
end

-- Set NCAR build environment variables
local my_ncar_id    = "$mod_name-$mod_version"
local my_ncar_env   = "$NCAR_SPACK_HOST-$comp_name-$comp_version-" .. my_ncar_id

setenv("NCAR_ID_MPI",           my_ncar_id)
setenv("NCAR_BUILD_ENV_MPI",    my_ncar_env)
pushenv("NCAR_BUILD_ENV",       my_ncar_env)
setenv("NCAR_ROOT_CRAY_MPICH",  MPICH_DIR)
setenv("NCAR_ROOT_MPI",         MPICH_DIR)

-- If GPUs available, depend on CUDA
local num_gpus = os.getenv("NGPUS")
if num_gpus and tonumber(num_gpus) > 0 then
    depends_on($cuda_dependency)
end

-- HPE suggests this setting to reduce RPC launch timeouts
setenv("PALS_FANOUT", "32")
EOF
}

function modify_craype {
cat >> $1 << EOF

-- CPU architecture specification 
prepend_path("PE_PRODUCT_LIST", "CRAYPE_X86_MILAN")
setenv("CRAY_CPU_TARGET", "x86-milan")

-- If ncarcompilers is loaded, reload it to keep forward
if isloaded("ncarcompilers") then
    always_load("ncarcompilers")
end

-- Make sure Cray software is RPATH'd to ensure version consistency
setenv("CRAY_ADD_RPATH", "yes") 
EOF
}

function modify_libsci {
cat >> $1 << EOF

-- Set family to indicate math routines
family("mathpack")
EOF
}

function set_dependency {
    pr_line=$(grep -nh -B1 craype $1 | grep 'prereq.*(' | awk -F[:-] '{print $1}')

    if [[ -n $pr_line ]]; then
        sed -i "$pr_line s/prereq/depends_on/" $1
    else
        add_dependency $1
    fi

    unset pr_line
}

function add_dependency {
cat >> $1 << EOF

-- Module depends on Cray Compiler Drivers for proper function
depends_on("craype")
EOF
}

function reverse_mods {
    sed -i '/MODULEPATH/ s/^prepend_path/append_path/' $1
}

function get_module_dir {
    if [[ $2 == cdep ]]; then
        my_cpe=$(get_cpe_version $mod_name $mod_version)
        my_cce=$(get_package_version $my_cpe cce)

        if [[ $my_cce != $cce_version ]]; then
            cce_version=$my_cce
            module -q load cce/$cce_version
        fi
    fi

    module --raw show $1 |& grep -m1 /opt/cray/pe | sed 's| *\(.*\)/.*|\1|' | sed 's|crayclang/[^/]*|%CMP%/\*|'
}

function copy_mods {
    mod_list=(${!1})
    for mod_entry in ${mod_list[@]}; do
        log_me=yes
        mod=${mod_entry/(D)}
        mod_name=${mod%/*}
        mod_version=${mod#*/}
        mod_dir=$(get_module_dir $mod $1)

        tsecho "Package: $GCOL$mod$DCOL"
        
        if [[ $1 == cdep ]]; then
            for comp in $comp_list; do
                unset src_file src_version
                comp_name=${comp%/*}
                comp_version=${comp#*/}

                if [[ -f $mod_dir/${mod_version}.lua ]]; then
                    src_file=$mod_dir/${mod_version}.lua
                else
                    src_dirs="$(echo $(sed "s/%CMP%/${comp_dep[$comp_name]}/" <<< $mod_dir))"

                    for src_dir in $src_dirs; do
                        src_compat=$(sed "s|.*${comp_dep[$comp_name]}/\([^./]*\).*|\1|" <<< $src_dir)
                        
                        if [[ $src_compat -gt $src_version ]] && [[ $src_compat -le ${comp_version%%.*} ]]; then
                            if [[ -f $src_dir/${mod_version}.lua ]]; then
                                src_version=$src_compat
                                src_file=$src_dir/${mod_version}.lua
                            fi
                        fi
                    done

                    if [[ -z $src_file ]]; then
                        tsecho "Error: no module file found for ${mod}!"
                        exit 1
                    fi
                fi

                if [[ $mod_name == cray-mpich ]]; then
                    if [[ ! -d $mod_deployment/$mod/$comp ]]; then
                        rm -f $mod_deployment/$comp/${mod}.lua
                        continue
                    fi
                fi

                if [[ -n ${comp_skip[$comp]} ]] && [[ " ${comp_skip[$comp]} " == *" $mod "* ]]; then
                    rm -f $mod_deployment/$comp/${mod}.lua
                    continue
                elif [[ -n ${comp_skip[$comp_name]} ]] && [[ " ${comp_skip[$comp_name]} " == *" $mod "* ]]; then
                    rm -f $mod_deployment/$comp/${mod}.lua
                    continue
                fi

                mod_path=$mod_deployment/$comp
                mkdir -p $mod_path/$mod_name
                tsecho "    copying module from ${PCOL}${src_file}$DCOL (${PCOL}comp=$comp$DCOL)"
                cp $src_file $mod_path/$mod_name

                if [[ $mod != $mod_entry ]]; then
                    ln -sf ${mod_version}.lua $mod_path/$mod_name/default
                fi

                if [[ " $mpis " == *" $mod_name "* ]]; then
                    modify_mpi $mod_path/${mod}.lua
                    tsecho "    modified $GCOL$mod$DCOL (${PCOL}compat=$src_version$DCOL) for use as MPI library"
                elif [[ $mod_name == cray-libsci ]]; then
                    modify_libsci $mod_path/${mod}.lua
                fi
                
                set_dependency $mod_path/${mod}.lua
            done
        elif [[ -f $mod_dir/${mod_version}.lua ]]; then
            mod_path=$mod_deployment/Core
            mkdir -p $mod_path/$mod_name
            cp $mod_dir/${mod_version}.lua $mod_path/$mod_name
            tsecho "    copying module from ${PCOL}$mod_dir/${mod_version}.lua$DCOL"

            if [[ $mod != $mod_entry ]]; then
                ln -sf ${mod_version}.lua $mod_path/$mod_name/default
            fi

            if [[ " $compilers " == *" $mod_name "* ]]; then
                tsecho "    modified $GCOL$mod$DCOL for use as compiler"
                modify_comp $mod_path/${mod}.lua
            else
                case $mod_name in
                    craype)
                        modify_craype $mod_path/${mod}.lua
                        ;;
                    perftools-base)
                        reverse_mods $mod_path/${mod}.lua
                        ;;
                esac
            fi

            if [[ " $compilers craype " != *" $mod_name "* ]]; then
                set_dependency $mod_path/${mod}.lua
            fi
        else
            tsecho "Error: no module file found at $mod_dir/${mod_version}.lua!"
            exit 1
        fi
    done
}

# Find CPE versions
cpe_root=/opt/cray/pe/cpe
cpe_versions="$(ls --color=never -rd /opt/cray/pe/cpe/*.* | xargs -n1 basename | xargs)"

# Cray module paths
cray_mpath=/opt/cray/pe/lmod/modulefiles/core:/opt/cray/modulefiles:/opt/cray/pe/lmod/modulefiles/craype-targets/default

tsecho "Copying core modules to $mod_root"
module -q load PrgEnv-cray

tm_file=$SPACK_ENV/.tempmod

declare -A comp_pe
comp_pe[cce]=CRAY
comp_pe[gcc]=GNU
comp_pe[nvhpc]=NVIDIA
comp_pe[intel]=INTEL

declare -A comp_dep
comp_dep[cce]=crayclang
comp_dep[gcc]=gnu
comp_dep[nvhpc]=nvidia
comp_dep[intel]=intel
comp_dep[oneapi]=intel

declare -A comp_skip
comp_skip[intel/2021.7.1]=cray-libsci/22.11.1.2
comp_skip[intel]=cray-libsci/23.02.1.1

copy_mods core

tsecho "Searching for installed compilers"

cd $mod_deployment

for comp in $compilers; do
    comp_list="$comp_list $(ls -d $comp/* --color=never 2> /dev/null || true)"
done

tsecho "Copying cdep modules to $mod_root"
copy_mods cdep

module -q purge

# ===== INTEL ONEAPI MODULE TRIO =====

tsecho "Populating Intel compiler module set"

if [[ -d Core/intel-oneapi ]]; then
    mkdir -p Core/intel

    for icver in $(find Core/intel-oneapi/ -type f); do
        sed '/INTEL_COMPILER_TYPE/ s/ONEAPI/RECOMMENDED/' $icver > ${icver/-oneapi}
        
        if [[ $(sed 's|.*/\([^.]*\).*|\1|' <<< $icver) -ge 2024 ]]; then
            sed -i 's|\([/"]\)ifx|\1ifort|' ${icver/-oneapi}
        else
            sed -i 's|\([/"]\)ifx|\1intel64/ifort|' ${icver/-oneapi}
        fi
    done

    if [[ -f Core/intel-oneapi/default ]]; then
        def_imod=$(basename $(readlink -f Core/intel-oneapi/default))
        ln -sfn $def_imod Core/intel/default
    fi
fi

if [[ -d Core/intel-classic ]]; then
    for icver in $(find Core/intel-classic/ -type f); do
        ccver=$(sed -n '/INTEL_VERSION/ s|.*"\(.*\)".*|\1|p' $icver)
        onever=$(sed 's|.*/\(.*\)\.lua|\1|' <<< $icver)

        sed -i "/MODULEPATH/ s|intel|oneapi|" $icver
        sed -i "/MODULEPATH/ s|${ccver}|${onever}|" $icver
    done
fi

# ===== GCC TOOLCHAIN MODULES =====

# These modules allow users to use vendor compilers like Intel, NVIDIA with newer
# GCC toolchains than the system-default 7.5.0, enabling use of newer standards
# like C++ 17/20.

function write_toolchain_module {
cat > $1 << EOF
-- -*- lua -*-
-- Module file created manually on $(date)
--

whatis([[Name : gcc-toolchain]])
whatis([[Version : ${gcc_version}]])
whatis([[Short description : GCC toolchain including C++ standard library]])

help([[GCC toolchain: Includes major components from GCC install for use
with other compilers. This allows you to use newer components than provided
by the system $core_gcc (e.g., newer C++ standards)]])

-- Requires ncarcompilers to function (insert modifier flag)
depends_on("ncarcompilers")

-- Does not work with older versions of Cray wrappers
conflict("craype/2.7.20")

local gcc_root = "${gcc_dirs[$gcc_version]}"

setenv("NCAR_ROOT_GCC_TOOLCHAIN", gcc_root)
prepend_path("NCAR_MFLAGS_COMPILER", "--gcc-toolchain=" .. gcc_root, " ")
EOF
}

tsecho "Populating GCC toolchain modules for vendor compilers"
gcc_spack=$(spack find --format '{version} {prefix}' gcc)

declare -A gcc_dirs

while read gcc_version gcc_root; do
    if [[ gcc@$gcc_version != $core_gcc ]]; then
        gcc_dirs[$gcc_version]=$gcc_root
    fi
done <<< "$gcc_spack"

gcc_dirs[12.2.0]=/opt/cray/pe/gcc/12.2.0/snos

for comp_name in cce aocc nvhpc oneapi; do
    if [[ -d $comp_name ]]; then
        for comp_vers in $(ls -1 --color=never $comp_name/); do
            for gcc_version in ${!gcc_dirs[*]}; do
                mod_file=$comp_name/$comp_vers/gcc-toolchain/${gcc_version}.lua

                if [[ ! -f $mod_file ]]; then
                    tsecho "    creating ${GCOL}gcc-toolchain/${gcc_version}$DCOL for vendor compiler ${PCOL}$comp_name/$comp_vers${DCOL}"
                    mkdir -p $comp_name/$comp_vers/gcc-toolchain
                    write_toolchain_module $comp_name/$comp_vers/gcc-toolchain/${gcc_version}.lua
                fi
            done
        done
    fi
done

# ===== CREATE META-MODULES =====

hl_file=$SPACK_ENV/util/hidden-modules

function hide_module {
    if [[ -f $hl_file ]]; then
        if grep -q $1 $hl_file; then
            return
        fi
    fi

    echo "hide-modulefile $1" >> $hl_file
}

sys_gcc=gcc@$(gcc -dumpfullversion)
spack_commit=$(cd $SPACK_ROOT; git rev-parse HEAD)

if [[ $core_gcc != $sys_gcc ]]; then
    tsecho "Locate the core compiler for ncarenv"
    cc_root=$(spack location -i $core_gcc)
fi

# *This* ncarenv deployment
for mod_type in ncarenv ncarenv-basic; do
    mkdir -p $mod_root/environment/$mod_type
    mm_src=$NCAR_SPACK_ENV_BUILD/templates/modules/$mod_type.lua
    mm_file=$mod_root/environment/$mod_type/${NCAR_SPACK_HOST_VERSION}.lua

    sed "s|%MODPATH%|${mod_deployment}/Core|g" $mm_src > $tm_file
    sed -i "s|%BASEROOT%|${base_root}|g" $tm_file
    sed -i "s|%VERSION%|${NCAR_SPACK_HOST_VERSION}|g" $tm_file
    sed -i "s|%DATE%|$(date)|g" $tm_file
    sed -i "s|%UTILPATH%|${SPACK_ENV}/util|g" $tm_file
    sed -i "s|%DEFMODS%|$NCAR_SPACK_DEFMODS_NCAR|g" $tm_file
    sed -i "s|%HOST%|$NCAR_SPACK_HOST|g" $tm_file
    sed -i "s|%TMPROOT%|$NCAR_SPACK_TMPROOT|g" $tm_file
    sed -i "s|%CCROOT%|${cc_root}|g" $tm_file
    sed -i "s|%MODRC%|$hl_file|g" $tm_file
    sed -i "s|%ENVROOT%|$NCAR_SPACK_ROOT_DEPLOYMENT|g" $tm_file
    sed -i "s|%GITHASH%|$spack_commit|g" $tm_file
    mv $tm_file $mm_file
done

# All crayenv deployments
mkdir -p $mod_root/environment/crayenv
mm_src=$NCAR_SPACK_ENV_BUILD/templates/modules/crayenv.lua

cpe_defmods="cray-pals craype cray-dsmml cray-libsci PrgEnv-cray cce cray-mpich cray-pmi"

for cpe_version in $(find /opt/cray/pe/cpe -mindepth 1 -maxdepth 1 -type d -exec basename {} \;); do
    # Create list of default modules
    my_defmods=libfabric/${ofi_version}:craype-x86-milan:craype-network-ofi

    for mod_name in $cpe_defmods; do
        my_defmods=${mod_name}/$(get_package_version $cpe_version $mod_name):$my_defmods
    done

    mm_file=$mod_root/environment/crayenv/$cpe_version.lua
    sed "s|%MODPATH%|$cray_mpath|g" $mm_src > $tm_file
    sed -i "s|%VERSION%|$cpe_version|g" $tm_file
    sed -i "s|%DATE%|$(date)|g" $tm_file
    sed -i "s|%DEFMODS%|crayenv/${cpe_version}:$my_defmods|g" $tm_file
    sed -i "s|%TMPROOT%|$NCAR_SPACK_TMPROOT|g" $tm_file
    mv $tm_file $mm_file
done

if [[ $SPACK_ENV == $NCAR_SPACK_ENV_PUBLIC ]]; then
    for mod_type in ncarenv-basic crayenv; do
        for mm_file in $(echo $mod_root/environment/$mod_type/*); do
            hide_module $mm_file
        done
    done
fi

# Create developer addon modules and hide them
mkdir -p $mod_root/environment/cesmdev
mm_file=$mod_root/environment/cesmdev/1.0.lua
sed "s|%DATE%|$(date)|g" $NCAR_SPACK_ENV_BUILD/templates/modules/cesmdev.lua > $tm_file
sed -i "s|%HOST%|$NCAR_SPACK_HOST|g" $tm_file
mv $tm_file $mm_file
hide_module $mm_file

# ===== HIDE REQUESTED MODULES =====

for hl in $hide_list; do
    hide_mods="$(ls -1 --color=never $mod_deployment/$hl 2> /dev/null || true)"

    for hm in $hide_mods; do
        hide_module $hm
    done
done

# ===== FINALIZE BASE SHELL ENVIRONMENT =====

tsecho "Adding external utilities to the shell environment"

# Add utilities to the base environment when using ncarenv
util_root=/glade/u/apps/opt; cd $util_root
suse_major=15

declare -A ncar_utils
ncar_utils[qstat]=qstat-cache
ncar_utils[qinteractive]=pbstools
ncar_utils[execcasper]=pbstools
ncar_utils[qcmd]=pbstools
ncar_utils[launch_cf]=pbstools
ncar_utils[qhist]=qhist
ncar_utils[gladequota]=gladequota
ncar_utils[snapls]=gladequota
ncar_utils[set_gpu_rank]=mpitools
ncar_utils[mpibind]=mpitools
ncar_utils[cpu_bind]=mpitools
ncar_utils[gpu_bind]=mpitools
ncar_utils[create_conda_kernel]=ncar-conda
ncar_utils[compare_env_yaml]=ncar-conda
ncar_utils[spack-downstream]=csg-spack-downstreams
ncar_utils[sudox]=termtools
ncar_utils[licstatus]=termtools
ncar_utils[dumpenv]=termtools
ncar_utils[vncmgr]=vncmgr
ncar_utils[gedit]=leap-container/$suse_major
ncar_utils[gv]=leap-container/$suse_major
ncar_utils[evince]=leap-container/$suse_major
ncar_utils[diffmerge]=precise-container
ncar_utils[diffuse]=precise-container

skip_clone="gladequota leap-container/$suse_major precise-container"

if [[ $SPACK_ENV == $NCAR_SPACK_ENV_PUBLIC ]]; then
    mkdir -p $NCAR_SPACK_ROOT_BASE/utils/bin

    for util in ${!ncar_utils[@]}; do
        if [[ ! -d ${ncar_utils[$util]} ]]; then
            if [[ -O $util_root ]]; then
                if [[ " $skip_clone " != *" ${ncar_utils[$util]} "* ]]; then
                    tsecho "    cloning $GCOL${ncar_utils[$util]}$DCOL repo"
                    git clone --recurse-submodules --remote-submodules git@github.com:NCAR/${ncar_utils[$util]}.git
                else
                    tsecho "Error: No github repo for $util. Perform manual install and retry!"
                    exit 1
                fi
            else
                echo "Note: Skipping missing utility ${util}. $(whoami) does not own $util_root ..."
                continue
            fi
        fi

        if [[ ! -e $NCAR_SPACK_ROOT_BASE/utils/bin/$util ]]; then
            # First, let's make sure the repo is up to date (and submodules pulled)
            if [[ -O $util_root ]]; then
                if [[ " $skip_clone " != *" ${ncar_utils[$util]} "* ]]; then
                    cd $util_root/${ncar_utils[$util]}
                    git pull > /dev/null

                    if [[ -f .gitmodules ]]; then
                        git submodule update --init --remote --recursive > /dev/null
                    fi
                    cd - > /dev/null
                fi
            fi

            if [[ -e $util_root/${ncar_utils[$util]}/bin/$util ]]; then
                tsecho "    adding $GCOL$util$DCOL"
                ln -s $util_root/${ncar_utils[$util]}/bin/$util $NCAR_SPACK_ROOT_BASE/utils/bin/
            else
                tsecho "Error: Expected binary not found ($util_root/${ncar_utils[$util]}/bin/$util)!"
                exit 1
            fi
        fi
    done
fi

tsecho "Finalize the Spack view"
view_root=$base_root/view

# Make sure RPC is available for WRF
if [[ ! -e $view_root/include/rpc ]] && [[ -d $view_root/include/tirpc/rpc ]]; then
    ln -s $view_root/include/tirpc/* $view_root/include/
fi

# Symlink nedit
if [[ ! -e $view_root/bin/nedit ]] && [[ -e $view_root/bin/xnedit ]]; then
    cd $view_root/bin
    ln -s xnedit nedit
    cd - > /dev/null
fi

# ===== SET UP PYTHON PROGRAM WRAPPERS =====

# These programs have runtime dependencies on Python packages. Since we don't expose Python
# packages via modules, we need to inject these at runtime in as simple and non-obtrusive way as
# possible
wrapped_progs="charliecloud"

function write_pyprog_wrapper {
cat > $tm_file << EOF
#!/bin/bash
# This is a wrapper designed to ensure Python environment contains the runtime package
# dependencies that the program expects

my_root=$wrapper_root

if [[ -n \$NCAR_PYTHON_LIBRARY_DIRTY ]]; then
    export PYTHONPATH=$py_path:\$PYTHONPATH
else
    export PYTHONPATH=$py_path
fi

# Remove self from the PATH
PATH=\${PATH/\${my_root}:}

exec $1 \$@
EOF
}

tsecho "Creating wrappers for packages with runtime Python dependencies"

for prog in $wrapped_progs; do
    while read spec_name spec_version spec_hash spec_root; do
        tsecho "    creating wrapper for $GCOL$spec_name@$spec_version$DCOL"
        py_deps=$(spack dependencies -i -t --deptype run $prog | grep py-)

        while read py_pkg_hash py_pkg_name py_pkg_version; do
            if [[ -d $py_pkg_root ]]; then
                py_pkg_library=$(find $py_pkg_root/$py_pkg_name/$py_pkg_version -type d -name site-packages)
            else
                py_pkg_path=$(spack location -i /${py_pkg_hash})
                py_pkg_root=${py_pkg_path%/${py_pkg_name}/*}
                py_pkg_library=$(find $py_pkg_path -type d -name site-packages)
            fi

            if [[ -n $py_pkg_library ]]; then
                py_path=${py_path:+${py_path}:}$py_pkg_library
            else
                tsecho "Error: site-library could not be found for $py_pkg_name@$py_pkg_version"
                exit 1
            fi
        done < <(tr '@' ' ' <<< $py_deps)

        wrapper_root=$base_root/wrappers/$spec_name/$spec_version/$spec_hash/bin
        mkdir -p $wrapper_root

        for bin_name in $(find $spec_root/bin -type f -executable -printf "%f\n"); do
            write_pyprog_wrapper $bin_name
            mv $tm_file $wrapper_root/$bin_name
            chmod +x $wrapper_root/$bin_name
        done

        unset py_path
    done < <(spack find --format "{name} {version} {hash:4} {prefix}" $prog 2> /dev/null)
done

# ===== SET UP PERL LIBRARY =====

perl_mod_list="Pod::Parser HTML::Entities"
#perl_mod_list="Pod::Parser HTML::Entities XML::LibXML"
perl_lib_root=$NCAR_SPACK_ROOT_BASE/perl

if [[ $NCAR_SPACK_ENV_TYPE == public ]]; then
    tsecho "Checking for Spack-installed Perl"
    perl_hash=$(spack find -x --format '{hash}' perl)
    perl_deps="/$perl_hash libxml2"

    if [[ $? == 0 ]]; then
        tsecho "Populating Perl library"
        echo
        spack load $perl_deps

        for pmod in $perl_mod_list; do
            if [[ $pmod == *LibXML ]]; then
                # One test fails currently...
                cpanm install --force -L $perl_lib_root $pmod || true
            else
                cpanm install -L $perl_lib_root $pmod
            fi
        done

        spack unload $perl_deps
        echo
    fi
fi

# ===== CREATE LMOD AVAIL HOOK =====

tsecho "Creating Lmod functionality extensions"

function create_sp {
cat > $tm_file << EOF
require("strict")
require("sandbox")
local hook = require("Hook")

local mapT =
{
   grouped = {
      ['/environment$'] = "Module Stack Environments",
      ['/Core$'] = "Compilers and Core Software",
EOF

comp_cat_list="aocc arm cce clang gcc intel nag oneapi nvhpc"
mpi_cat_list="cray-mpich hpcx-mpi intel-mpi intel-oneapi-mpi mpi-serial mpich mvapich2 mvapich2-gdr openmpi"

for comp_cat in $comp_cat_list; do
    for mpi_cat in $mpi_cat_list; do
        echo "      ['modules/[^/]+/${mpi_cat//-/%-}/[^/]+/$comp_cat/[^/]*$'] = 'MPI-dependent Software - [$comp_cat + $mpi_cat]'," >> $tm_file
    done

    echo "      ['modules/[^/]+/$comp_cat/[^/]*$'] = 'Compiler-dependent Software - [$comp_cat]'," >> $tm_file
done

cat >> $tm_file << EOF
      ['perftools/[^/]+/modulefiles$'] = 'Cray Performance Analysis Tools - [perftools-base]',
      ['modulefiles/perftools/[^/]*$'] = 'Cray Performance Analysis Tools - [perftools-base]',
   },
}

function avail_hook(t)
   local availStyle = masterTbl().availStyle
   local styleT     = mapT[availStyle]
   if (not availStyle or availStyle == "system" or styleT == nil) then
      return
   end

   for k,v in pairs(t) do
      for pat,label in pairs(styleT) do
         if (k:find(pat)) then
            t[k] = label
            break
         end
      end
   end
end

hook.register("avail",avail_hook)

function universal_mgrload(required, active)
   if (mode() == "load" or mode() == "unload") then
      MCP:mgrload(required, active)
   end
end

sandbox_registration {
    universal_mgrload = universal_mgrload
}
EOF
}

# Path to Lmod site hook file
sp_file=$SPACK_ENV/util/SitePackage.lua
create_sp
mv $tm_file $sp_file

# ===== CREATE LMOD PROPERTY TABLE =====

# Path to Lmod properties file
rc_file=$SPACK_ENV/util/lmodrc.lua

cat > $tm_file << EOF
local i18n = require("i18n")
propT = {
   source = {
      validT = { user = 1 },
      displayT = {
         user = { short = "(U)", full_color = false, color = "blue", doc = "User-generated downstream module", }
      },
   },
   state = {
      validT = { experimental = 1, testing = 1, obsolete = 1 },
      displayT = {
         experimental  = { short = "(E)", full_color = false,  color = "blue",  doc = i18n("ExplM"), },
         testing       = { short = "(T)", full_color = false,  color = "green", doc = i18n("TstM"), },
         obsolete      = { short = "(O)", full_color = false,  color = "red",   doc = i18n("ObsM"), },
      },
   },
   lmod = {
      validT = { sticky = 1 },
      displayT = {
         sticky = { short = "(S)",  color = "red",    doc = i18n("StickyM"), }
      },
   },
   status = {
      validT = { active = 1, },
      displayT = {
         active = { short = "(L)",  color = "yellow", doc = i18n("LoadedM")},
     },
   },
}
EOF

mv $tm_file $rc_file

tsecho "Postprocessing successful"
