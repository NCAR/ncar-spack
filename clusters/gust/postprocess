#!/bin/bash
#
#   This script copies relevant modules from the crayenv
#   container environment into a curated tree
#

# CONFIGURABLES
compilers="cce gcc nvhpc oneapi intel"
mpis="cray-mpich"
cray_network=ofi

# MODULES TO COPY
core="  craype/2.7.17
        cce/14.0.2
        cce/14.0.3
        gcc/10.3.0
        gcc/11.2.0
        gcc/12.1.0
        perftools-base/22.06.0
        perftools-base/22.09.0"
cdep="  cray-libsci/22.08.1.1
        cray-mpich/8.1.18
        cray-mpich/8.1.19"

# Perform common script setup including environment checks
export my_dir="$( cd "$(dirname "$0")" ; pwd )"
. $my_dir/tools/init.sh

log_active=0

if [[ $SPACK_ENV == $NCAR_SPACK_ENV_PUBLIC ]]; then
    mod_root=$NCAR_SPACK_ROOT_MODULES
else
    mod_root=$SPACK_ENV/modules
fi

mod_deployment=${mod_root}/$NCAR_SPACK_HOST_VERSION

while [[ $# -gt 0 ]]; do
    case $1 in
        -v|--verbose)
            log_active=1
            ;;
        -c|--clean)
            spack_flags=--delete-tree
            ;;
        -f|--force)
            force_updates=true
            ;;
    esac

    shift
done

function modify_comp {
cat >> $1 << EOF

# Ensure only one is loaded at time
family compiler

# Add compiler modules to MODULEPATH
append-path MODULEPATH ${mod_deployment}/$mod

# Set the PE, since this is the only setting from the PrgEnv module that matters
setenv PE_ENV ${comp_pe[$mod_name]}
EOF
}

function modify_mpi {
cat >> $1 << EOF

# Ensure only one is loaded at time
family mpi

# Add MPI modules to MODULEPATH
append-path MODULEPATH ${mod_deployment}/${mod}/$comp

# Use openfabrics
setenv CRAYPE_NETWORK_TARGET $cray_network
EOF

if [[ ${libfabric[$mod_version]+a} ]]; then
cat >> $1 << EOF

# Libfabric settings
prepend-path PATH /opt/cray/libfabric/${libfabric[$mod_version]}/bin
prepend-path LD_LIBRARY_PATH /opt/cray/libfabric/${libfabric[$mod_version]}/lib64
prepend-path MANPATH /opt/cray/libfabric/${libfabric[$mod_version]}/share/man
prepend-path PKG_CONFIG_PATH /opt/cray/libfabric/${libfabric[$mod_version]}/lib64/pkgconfig
EOF
fi

if [[ ${pals[$mod_version]+a} ]]; then
cat >> $1 << EOF

# PALS support
prepend-path PATH /opt/cray/pe/pals/${pals[$mod_version]}/bin
prepend-path MANPATH /opt/cray/pe/pals/${pals[$mod_version]}/man
prepend-path PKG_CONFIG_PATH /opt/cray/pe/pals/${pals[$mod_version]}/lib/pkgconfig
prepend-path PE_PALS_PKGCONFIG_LIBS libpals
prepend-path PE_PKGCONFIG_PRODUCTS PE_PALS
set-alias mpirun mpiexec
EOF
fi

cat >> $1 << EOF

# If wrapper is loaded, make sure mpi wrappers are removed at unload
if { [ info exists ::env(NCAR_WRAPPER_MPI_PATH) ] } {
    remove-path PATH $::env(NCAR_WRAPPER_MPI_PATH)
}

# If ncarcompilers is loaded, reload it to keep forward
if {[ is-loaded ncarcompilers ]} {
    always-load ncarcompilers
}
EOF
}

function modify_craype {
cat >> $1 << EOF

# CPU architecture specification 
prepend-path     PE_PRODUCT_LIST CRAYPE_X86_MILAN
setenv           CRAY_CPU_TARGET x86-milan

# Make module "sticky" (need to --force to remove/purge)
add-property lmod sticky

# If ncarcompilers is loaded, reload it to keep forward
if {[ is-loaded ncarcompilers ]} {
    always-load ncarcompilers
}
EOF

if [[ ${xpmem[$mod_version]+a} ]]; then
cat >> $1 << EOF

# Cray XPMEM configuration
prepend-path     PE_PKGCONFIG_PRODUCTS PE_XPMEM
setenv           PE_XPMEM_PKGCONFIG_LIBS cray-xpmem
setenv           CRAY_XPMEM_INCLUDE_OPTS -I/opt/cray/xpmem/${xpmem[$mod_version]}/include
setenv           CRAY_XPMEM_POST_LINK_OPTS -L/opt/cray/xpmem/${xpmem[$mod_version]}/lib64
EOF
fi
}

function copy_mods {
    mod_list=(${!1})
    for mod in ${mod_list[@]}; do
        mod_name=${mod%/*}
        mod_version=${mod#*/}

        [[ $log_active == 1 ]] && echo "Package: $mod"
        cd $2
        
        if [[ $1 == cdep ]]; then
            for comp in $comp_list; do
                mod_path=$mod_deployment/$comp
                mkdir -p $mod_path/$mod_name
                cp $mod $mod_path/$mod_name

                if [[ " $mpis " == *" $mod_name "* ]]; then
                    [[ $log_active == 1 ]] && echo "  - modifying $mod for use as MPI library"
                    modify_mpi $mod_path/$mod
                fi
            done
        else
            mod_path=$mod_deployment/Core
            mkdir -p $mod_path/$mod_name
            cp $mod $mod_path/$mod_name

            if [[ " $compilers " == *" $mod_name "* ]]; then
                [[ $log_active == 1 ]] && echo "  - modifying $mod for use as compiler"
                modify_comp $mod_path/$mod
            else
                case $mod_name in
                    craype)
                        modify_craype $mod_path/$mod
                        ;;
                esac
            fi
        fi
        
        cd - > /dev/null
    done
}

# First, let's make sure module tree exists
if [[ ! -d $mod_deployment ]] || [[ -n $spack_flags ]]; then
    if [[ $log_active == 1 ]]; then
        spack module lmod refresh -y $spack_flags
    else
        spack module lmod refresh -y $spack_flags > /dev/null
    fi
fi

# Version dictionaries
declare -A libfabric=( [8.1.18]=1.15.0.0 )
declare -A pals=( [8.1.18]=1.2.0 )
declare -A xpmem=( )

[[ $log_active == 1 ]] && echo "Searching for installed compilers ..."

cd $mod_deployment

for comp in $compilers; do
    comp_list="$comp_list $(ls -d $comp/* --color=never 2> /dev/null || true)"
done

cd - > /dev/null

[[ $log_active == 1 ]] && echo "Copying modules to $mod_root ..."

declare -A comp_pe
comp_pe[cce]=CRAY
comp_pe[gcc]=GNU
comp_pe[nvhpc]=NVIDIA
comp_pe[intel]=INTEL

copy_mods core /opt/cray/pe/modulefiles
copy_mods cdep /opt/cray/pe/modulefiles

# Make sure the meta-modules exist
cray_mpath=/opt/cray/pe/modulefiles:/opt/cray/modulefiles:/opt/modulefiles:/opt/cray/pe/perftools/default/modulefiles:/opt/cray/pe/modulefiles:/opt/cray/pe/craype-targets/default/modulefiles:/opt/cray/modulefiles:/opt/cray/pe/craype/default/modulefiles

for mm_type in ncarenv crayenv; do
    mkdir -p $mod_root/environment/$mm_type
    mm_src=$NCAR_SPACK_ENV_BUILD/templates/modules/${mm_type}.lua

    if [[ $mm_type == ncarenv ]]; then
        mm_file=$mod_root/environment/$mm_type/${NCAR_SPACK_HOST_VERSION}.lua
    else
        mm_file=$mod_root/environment/$mm_type/${NCAR_SPACK_CPE_VERSION}.lua
    fi

    if [[ ! -f $mm_file ]]; then
        if [[ $mm_type == ncarenv ]]; then
            sed "s|%MODPATH%|${mod_deployment}/Core|g" $mm_src > $mm_file
            sed -i "s|%VIEWROOT%|${NCAR_SPACK_ROOT_VIEW}|g" $mm_file
        else
            sed "s|%MODPATH%|${cray_mpath}|g" $mm_src > $mm_file
        fi

        sed -i "s|%VERSION%|${NCAR_SPACK_HOST_VERSION}|g" $mm_file
        sed -i "s|%DATE%|$(date)|g" $mm_file
    fi
done

[[ $log_active == 1 ]] && echo "Adding external utilities to the view ..."

# Add utilities to the view if missing
util_root=/glade/u/apps/opt; cd $util_root

declare -A ncar_utils
ncar_utils[qstat]=qstat-cache
ncar_utils[qinteractive]=pbstools
ncar_utils[qcmd]=pbstools
ncar_utils[qhist]=qhist
ncar_utils[gladequota]=gladequota

skip_clone="gladequota"

if [[ $SPACK_ENV == $NCAR_SPACK_ENV_PUBLIC ]]; then
    for util in ${!ncar_utils[@]}; do
        if [[ ! -d ${ncar_utils[$util]} ]]; then
            if [[ " $skip_clone " != *" ${ncar_utils[$util]} "* ]]; then
                [[ $log_active == 1 ]] && echo "  - cloning ${ncar_utils[$util]} repo"
                git clone git@github.com:NCAR/${ncar_utils[$util]}.git
            else
                >&2 echo "Error: No github repo for $util. Perform manual install and retry!"
                exit 1
            fi
        fi

        if [[ ! -e $NCAR_SPACK_ROOT_VIEW/bin/$util ]]; then
            [[ $log_active == 1 ]] && echo "  - adding $util"
            ln -s $util_root/${ncar_utils[$util]}/bin/$util $NCAR_SPACK_ROOT_VIEW/bin/
        fi
    done
fi
