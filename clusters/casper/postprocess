#!/bin/bash
#
#   This script does final setup for the production
#   environment on the host system
#

# CONFIGURABLES
compilers="gcc nvhpc oneapi intel"
mpis="openmpi"

# Perform common script setup including environment checks
export my_dir="$( cd "$(dirname "$0")" ; pwd )"
. $my_dir/tools/init.sh

if [[ $SPACK_ENV == $NCAR_SPACK_ENV_PUBLIC ]]; then
    mod_root=$NCAR_SPACK_ROOT_MODULES
    view_root=$NCAR_SPACK_ROOT_VIEW
else
    mod_root=$SPACK_ENV/modules
    view_root=$SPACK_ENV/ncarenv
fi

mod_deployment=${mod_root}/$NCAR_SPACK_HOST_VERSION

while [[ $# -gt 0 ]]; do
    case $1 in
        -c|--clean)
            spack_flags=--delete-tree
            ;;
    esac

    shift
done

# First, let's make sure module tree exists
if [[ ! -d $mod_deployment ]] || [[ -n $spack_flags ]]; then
    spack module lmod refresh -y $spack_flags
fi

tm_file=$SPACK_ENV/.tempmod

tsecho "Populating Intel compiler module set"
cd $mod_deployment

if [[ -d Core/intel-oneapi ]]; then
    mkdir -p Core/intel

    for icver in $(find Core/intel-oneapi/ -type f); do
        sed '/INTEL_COMPILER_TYPE/ s/ONEAPI/RECOMMENDED/' $icver > ${icver/-oneapi}
    done
fi

if [[ -d Core/intel-classic ]]; then
    for icver in $(find Core/intel-classic/ -type f); do
        ccver=$(sed -n '/INTEL_VERSION/ s|.*"\(.*\)".*|\1|p' $icver)
        onever=$(sed 's|.*/\(.*\)\.lua|\1|' <<< $icver)

        sed -i "0,/MODULEPATH/ s|intel/${ccver}|oneapi/${onever}|" $icver
    done
fi

# Make sure the meta-modules exist

# *This* ncarenv deployment
for mod_type in ncarenv ncarenv-basic; do
    mkdir -p $mod_root/environment/$mod_type
    mm_src=$NCAR_SPACK_ENV_BUILD/templates/modules/$mod_type.lua
    mm_file=$mod_root/environment/$mod_type/${NCAR_SPACK_HOST_VERSION}.lua

    sed "s|%MODPATH%|${mod_deployment}/Core|g" $mm_src > $tm_file
    sed -i "s|%VIEWROOT%|${view_root}|g" $tm_file
    sed -i "s|%VERSION%|${NCAR_SPACK_HOST_VERSION}|g" $tm_file
    sed -i "s|%DATE%|$(date)|g" $tm_file
    sed -i "s|%UTILPATH%|${SPACK_ENV}/util|g" $tm_file
    sed -i "s|%DEFMODS%|$NCAR_SPACK_DEFMODS_NCAR|g" $tm_file
    sed -i "s|%HOST%|$NCAR_SPACK_HOST|g" $tm_file
    sed -i "s|%TMPROOT%|$NCAR_SPACK_TMPROOT|g" $tm_file
    mv $tm_file $mm_file
done

tsecho "Adding external utilities to the view"

# Add utilities to the view if missing
util_root=/glade/u/apps/opt; cd $util_root

declare -A ncar_utils
ncar_utils[qstat]=qstat-cache
ncar_utils[qinteractive]=pbstools
ncar_utils[qcmd]=pbstools
ncar_utils[qhist]=qhist
ncar_utils[gladequota]=gladequota

skip_clone="gladequota mpitools"

if [[ $SPACK_ENV == $NCAR_SPACK_ENV_PUBLIC ]]; then
    mkdir -p $NCAR_SPACK_ROOT_VIEW/utils/bin

    for util in ${!ncar_utils[@]}; do
        if [[ ! -d ${ncar_utils[$util]} ]]; then
            if [[ -O $util_root ]]; then
                if [[ " $skip_clone " != *" ${ncar_utils[$util]} "* ]]; then
                    tsecho "    cloning $GCOL${ncar_utils[$util]}$DCOL repo"
                    git clone git@github.com:NCAR/${ncar_utils[$util]}.git
                else
                    tsecho "Error: No github repo for $util. Perform manual install and retry!"
                    exit 1
                fi
            else
                echo "Note: Skipping missing utility ${util}. $(whoami) does not own $util_root ..."
                continue
            fi
        fi

        if [[ ! -e $NCAR_SPACK_ROOT_VIEW/utils/bin/$util ]]; then
            if [[ -e $util_root/${ncar_utils[$util]}/bin/$util ]]; then
                tsecho "    adding $GCOL$util$DCOL"
                ln -s $util_root/${ncar_utils[$util]}/bin/$util $NCAR_SPACK_ROOT_VIEW/utils/bin/
            else
                tsecho "Error: Expected binary not found ($util_root/${ncar_utils[$util]}/bin/$util)!"
                exit 1
            fi
        fi
    done
fi

# ===== CREATE LMOD AVAIL HOOK =====

function create_sp {
cat > $tm_file << EOF
require("strict")
local hook = require("Hook")

local mapT =
{
   grouped = {
      ['/environment$'] = "NCAR Environments",
      ['/Core$'] = "Compilers and Core Software",
EOF

cd $mod_deployment
for mod_cat in $(find . -mindepth 2 -maxdepth 2 ! -path "*/Core/*" -type d); do
    if ls $mod_cat/*/*/* >& /dev/null; then
        mname=$(cut -d/ -f2 <<< $mod_cat)
        mvers=$(cut -d/ -f3 <<< $mod_cat)

        for mod_sub in $(find $mod_cat -mindepth 2 -maxdepth 2 -type d); do
            cname=$(cut -d/ -f4 <<< $mod_sub)
            cvers=$(cut -d/ -f5 <<< $mod_sub)

            echo "      ['modules[/%.%d]*/${mname//-/%-}/${mvers//./%.}/$cname/${cvers//./%.}$'] = 'MPI-dependent Software - [$cname/$cvers + $mname/$mvers]'," >> $tm_file
        done
    else
        cname=$(cut -d/ -f2 <<< $mod_cat)
        cvers=$(cut -d/ -f3 <<< $mod_cat)

        echo "      ['modules[/%.%d]*/$cname/${cvers//./%.}$'] = 'Compiler-dependent Software - [$cname/$cvers]'," >> $tm_file
    fi
done

# Add labels for mpi-serial from CSEG tree
if [[ -d /glade/u/apps/cseg/modules/$NCAR_SPACK_HOST_VERSION ]]; then
    cd /glade/u/apps/cseg/modules/$NCAR_SPACK_HOST_VERSION

    for mod_cat in mpi-serial/*; do
        mname=mpi-serial
        mvers=$(cut -d/ -f2 <<< $mod_cat)

        for mod_sub in $(find $mod_cat -mindepth 2 -maxdepth 2 -type d); do
            cname=$(cut -d/ -f3 <<< $mod_sub)
            cvers=$(cut -d/ -f4 <<< $mod_sub)

            echo "      ['modules[/%.%d]*/${mname//-/%-}/${mvers//./%.}/$cname/${cvers//./%.}$'] = 'MPI-dependent Software - [$cname/$cvers + $mname/$mvers]'," >> $tm_file
        done
    done
fi

cat >> $tm_file << EOF
   },
}

function avail_hook(t)
   local availStyle = masterTbl().availStyle
   local styleT     = mapT[availStyle]
   if (not availStyle or availStyle == "system" or styleT == nil) then
      return
   end

   for k,v in pairs(t) do
      for pat,label in pairs(styleT) do
         if (k:find(pat)) then
            t[k] = label
            break
         end
      end
   end
end

hook.register("avail",avail_hook)
EOF
}

# Path to Lmod site hook file
sp_file=$SPACK_ENV/util/SitePackage.lua
create_sp
mv $tm_file $sp_file
