#!/bin/bash

function usage {
cat << EOF
Usage: $0 [-j JOBS] [-m MIRROR]

Options
    -j, --jobs      number of concurrent pkgs to cache (default 1)
    -m, --mirror    specify name or path to custom mirror

EOF
exit
}

if [[ " $@ " == *" -h "* ]] || [[ " $@ " == *" --help "* ]]; then
    usage
fi

# Perform common script setup including environment checks
export my_dir="$( cd "$(dirname "$0")" ; pwd )"
. $my_dir/tools/init.sh

# Set defaults
max_jobs=4

while [[ $# -gt 0 ]]; do
    case $1 in
        -j|--jobs)
            if [[ $1 == *=* ]]; then
                max_jobs=${1#*=}
            else
                max_jobs=$2; shift
            fi
            ;;
        -m|--mirror)
            if [[ $1 == *=* ]]; then
                mirror=${1#*=}
            else
                mirror=$2; shift
            fi
            ;;
        -v|--verbose)
            export log_verbosity=$((log_verbosity + 1))
            ;;
        *)
            >&2 echo "Error: unrecognized option $1"
            usage
            exit 1
            ;;
    esac

    shift
done

log_dir=$SPACK_ENV/logs
mkdir -p $log_dir
log_file=$log_dir/cache.$start_time
cache_cmd="spack buildcache push --private"

if [[ $NCAR_SPACK_DEPLOY_TYPE == production ]]; then
    mirror=${mirror:-$NCAR_SPACK_MIRROR_GLOBAL}
else
    mirror=${mirror:-$NCAR_SPACK_MIRROR_LOCAL}
fi

# Job tracking by PIDs
declare -A job_pids

function wait_for_jobs {
    while [[ ${#job_pids[@]} -ge $1 ]]; do
        for jp in ${!job_pids[@]}; do
            if ! kill -0 $jp 2> /dev/null; then
                unset job_pids[$jp]
            fi
        done
    done

    if [[ -f $log_file ]] && grep -q Error $log_file; then
        tsecho "Error: pushed failed! See $log_file for details."
        tsecho "Waiting for jobs to finish"
        wait
        exit 1
    fi
}

tsecho "Using up to $max_jobs threads to populate cache"
tsecho "Pushing to cache: ${PCOL}${mirror}${DCOL}"

raw_list=$(spack find --format "{prefix} {hash} {name}-{version}-{hash}")
pkg_list=$(awk -v envpath=${SPACK_ENV}/opt '$1~envpath { print $2" "$3 }' <<< "$raw_list")

while [[ ${cache_list+set} != set ]]; do
    case $mirror in
        file://*|/*)
            cache_list="$(ls ${mirror#file://}/*/manifests/spec/*/*.spec.manifest.json 2> /dev/null | sed 's|.*/\(.*\).spec.manifest.json|\1|')"
            ;;
        s3://*)
            cache_list=$(spack python $my_dir/tools/list_cache_s3.py ${mirror#s3://})

            if [[ $? == 1 ]]; then
                tsecho "Error: S3 cache could not be accessed. See above error."
                exit 1
            fi
            ;;
        *)
            mirror_path=$(spack mirror list --scope env:$SPACK_ENV | awk -v mirror=$mirror '$1 == mirror {print $3}')

            if [[ -z $mirror_path ]]; then
                tsecho "Error: specified mirror not found in environment"
                exit 1
            else
                mirror=$mirror_path
            fi
            ;;
    esac
done

while read hash pkg; do
    if [[ $cache_list != *$pkg* ]]; then
        if [[ -f $NCAR_SPACK_ENV_BUILD/.installs ]]; then
            use_cache=$(awk -F: -v spec_hash="$hash" '$2 == spec_hash {print $3}' $NCAR_SPACK_ENV_BUILD/.installs)
        fi

        if [[ $use_cache != no ]]; then
            tsecho "Caching package:  ${GCOL}${pkg}${DCOL}"
            log_cmd "$cache_cmd --only=package $mirror /$hash" >> $log_file
            $cache_cmd --only=package $mirror /$hash &>> $log_file &
            job_pids[$!]=running
        fi
    else
        tsecho "Skipping cached package: ${PCOL}${pkg}$DCOL" 1
    fi
    
    wait_for_jobs $max_jobs
done <<< "$pkg_list"

wait_for_jobs 1

update_log_pointers cache
