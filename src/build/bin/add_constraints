#!/bin/bash

function usage {
cat << EOF
Usage: $0 [OPTIONS]

This script can be used to add "constraints" to the build environmment's
spack.yaml. Such constraints include externals, which can be automatically or
manually detected, and requirements to set on packages.

If an external is set to be "fixed", this in turn sets buildable to false and
Spack will be forced to use the external.

Options
    -h, --help              show this help message
    -v, --verbose           provide additional logging messages

EOF
exit
}

if [[ " $@ " == *" -h "* ]] || [[ " $@ " == *" --help "* ]]; then
    usage
fi

# Perform common script setup including environment checks
export my_dir="$( cd "$(dirname "$0")" ; pwd )"
. $my_dir/tools/init.sh

while [[ $# -gt 0 ]]; do
    case $1 in
        -v|--verbose)
            export log_verbosity=1
            ;;
    esac

    shift
done

log_dir=$SPACK_ENV/logs
mkdir -p $log_dir
log_file=$log_dir/constraints.$start_time.${SUDO_USER:-$USER}

function manual_require {
    if [[ -z $1 ]]; then
        tsecho "Error: Invalid requirement set ($1); perhaps no core compiler?"
        exit 1
    fi

    mod_list=$(spack python $my_dir/tools/add_requirement.py $1 $2 $3)

    for mod_pkg in $mod_list; do
        tsecho "Set requirement   $GCOL$mod_pkg$DCOL to use $PCOL${1}$DCOL"
    done
}

function manual_external {
    if [[ " $my_meta " == *" fixed "* ]]; then
        spack python $my_dir/tools/add_external.py $pkg_spec fixed $pkg_path || skipped=yes
    else
        spack python $my_dir/tools/add_external.py $pkg_spec buildable $pkg_path || skipped=yes
    fi

    if [[ -z $skipped ]]; then
        tsecho "Adding external   $GCOL$pkg_spec (manual)$DCOL"
        unset skipped
    fi
}

function modify_compilers {
    if [[ " $my_meta " == *" compiler "* ]]; then
        for spec in $@; do
            for mod_type in all $spec; do
                if [[ -f $SPACK_ENV/templates/compilers/modify.${mod_type}.py ]]; then
                    tsecho " >> Adding environment modifications (type=$mod_type)"
                    spack python $SPACK_ENV/templates/compilers/modify.${mod_type}.py $spec
                fi
            done
        done
    fi
}

# First, let's get the known external prefixes
known_externals=$(spack config get packages | grep prefix: | awk -F: '{print $2}' | sort | uniq | xargs)

# Add package configuration settings
if [[ -f $SPACK_ENV/constraints.cfg ]]; then
tsecho "Finding specified package configuration in constraints.cfg"

while read entry; do
    if [[ -z $entry ]]; then
        continue
    fi

    case $entry in
        \#*)
            continue
            ;;
        *=*)
            read var_name var_value <<< ${entry/=/ }
            declare $var_name=$var_value
            ;;
        *'{'*)
            IFS=: read my_mode my_meta <<< ${entry%%\{*}
            my_meta="${my_meta/,/ }"
            ;;
        '}'*)
            unset my_mode my_meta
            ;;
        *)
            tsecho "Processing line: $entry" 1

            case ${my_mode// } in
                externals)
                    if [[ " $my_meta " == *" fixed "* ]]; then
                        ext_flags=--not-buildable
                    else
                        ext_flags=
                    fi

                    if [[ $entry == /* ]]; then
                        ext_flags="$ext_flags --path"

                        if [[ $entry != *\[*\]* ]]; then
                            tsecho "Error: spec must be delimited in path by [*]"
                            exit 1
                        fi

                        search_expr=$(sed 's/\[[^]]*\]/\\(\*\\)/g; s/\*/\.\*/g' <<< $entry)
                        search_params=$(tr -cd '(' <<< $search_expr | wc -c)
                        pkg_paths=$(echo $(tr -d '[]' <<< $entry))

                        if [[ -n $pkg_paths ]]; then
                            for pkg_path in $pkg_paths; do
                                if [[ $search_params -eq 1 ]]; then
                                    pkg_spec=$(sed "s|$search_expr|\1|; s|/|@|" <<< $pkg_path)
                                    pkg_name=${pkg_spec%@*}
                                    pkg_version=${pkg_spec#*@}
                                else
                                    read pkg_name pkg_version <<< $(sed "s|$search_expr|\1 \2|" <<< $pkg_path)
                                    pkg_spec=${pkg_name}@$pkg_version
                                fi

                                if [[ -d $pkg_path ]]; then
                                    if [[ " $known_externals " != *" ${pkg_path%%/} "* ]]; then
                                        if [[ " $my_meta " != *" manual "* ]]; then
                                            auto_result=$(spack external find $ext_flags $pkg_path $pkg_name)
                                        else
                                            unset auto_result
                                        fi

                                        if [[ $auto_result == *spack.yaml* ]]; then
                                            tsecho "Adding external   $GCOL$pkg_spec$DCOL"
                                        else
                                            manual_external
                                        fi

                                        modify_compilers $pkg_spec
                                        known_externals="$known_externals ${pkg_path%%/}"
                                    fi
                                elif [[ $pkg_path != *sbang ]]; then
                                    tsecho "Skipping external $BCOL${pkg_spec} (not found!)$DCOL"
                                fi
                            done

                            # Externals should also "use" the core compiler
                            if [[ " $my_meta " != *" floating "* ]]; then
                                manual_require "$core" $pkg_name
                            fi
                        fi
                    else
                        auto_result=$(spack external find $ext_flags $entry)

                        if [[ $auto_result == *spack.yaml* ]]; then
                            found_list=$(tail -n +2 <<< $auto_result | xargs)
                            tsecho "Adding externals  $GCOL${found_list}$DCOL"
                            #modify_compilers $found_list
                        fi

                        # Externals should also "use" the core compiler unless marked "floating"
                        if [[ " $my_meta " != *" floating "* ]]; then
                            manual_require "$core" "$entry"
                        fi
                    fi
                    ;;
                require|prefer)
                    my_meta=$(sed "s/core/$core/" <<< $my_meta)
                    manual_require "$my_meta" "${my_mode// }" "$entry"
                    ;;
                *)
                    tsecho "Error: Unknown mode $my_mode"
                    exit 1
                    ;;
            esac
            ;;
    esac
done < $SPACK_ENV/constraints.cfg
fi

update_log_pointers constraints
