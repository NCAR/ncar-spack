#!/bin/bash

function usage {
cat << EOF
Usage: $0 [MANIFEST]

Options
    -h                      show this help message
    -j, --buildjobs         number of build jobs to run (otherwise will use env default)

EOF
exit
}

if [[ " $@ " == *" -h "* ]]; then
    usage
fi

# Perform common script setup including environment checks
export my_dir="$( cd "$(dirname "$0")" ; pwd )"
. $my_dir/tools/init.sh
my_host=$(hostname)

# Defaults
pkg_manifest=$SPACK_ENV/packages.cfg
build_jobs=$(spack config get config | sed -n 's/^[ ]*build_jobs: \(.*\)/\1/p')
unset cache_label

while [[ $# -gt 0 ]]; do
    case $1 in
        -c|--cache-only)
            cache_label=" (cached)"
            ;;
        -j|--buildjobs)
            build_jobs=$2
            shift
            ;;
        *)
            pkg_manifest=$1
            ;;
    esac

    shift
done

spec_cmd="spack spec -I -N -t -l -c edges"

if [[ -n $build_jobs ]]; then
    build_cmd="spack install -j $build_jobs"
else
    build_cmd="spack install"
fi

if [[ -n $cache_label ]]; then
    build_cmd="$build_cmd --cache-only"
fi

# Detect version of system GCC
sys_gcc=$(gcc -v |& grep "gcc version" | cut -d' ' -f3)

cat << EOF

Start time          = $start_time
Spack environment   = $SPACK_ENV
Package manifest    = $pkg_manifest
Build jobs          = $build_jobs
System GCC          = gcc@$sys_gcc

Processing install manifest ...

EOF

function prepare_spec {
    declare -g spec="$pkg" comp=${comp:-$install_compiler} mpi=${mpi:-$install_mpi}
    [[ -n $comp ]] && spec="$(sed "s|%CMP%|%$comp|g;t;s|$| %$comp|" <<< "$spec")"
    [[ -n $mpi ]]  && spec="$(sed "s|%MPI%|^$mpi|g;t;s|$| ^$mpi|" <<< "$spec")"
    spec="$(sed -r "s/%gcc( |$)/%gcc@${sys_gcc}\1/g" <<< "$spec")"
    
    while [[ $spec == *:* ]]; do
        spec_opt="$(sed 's|.*<\([^>]*\)>.*|\1|' <<< "$spec")"
        IFS=: read opt_type opt_body <<< "$spec_opt"

        if [[ $comp == ${opt_type}* ]] || [[ $mpi == ${opt_type}* ]]; then
            spec="${spec/<$spec_opt>/$opt_body}"
        else
            spec="${spec/<$spec_opt>}"
        fi
    done
}

function check_spec {
    if [[ $install_build == false ]]; then
        tsecho "Skipping spec   $PCOL$spec$BCOL$type_msg$DCOL (reason: build=false specified)"
    else
        skip_spec=false
        set +e

        if [[ -f $SPACK_ENV/.installs ]]; then
            spec_hash=$(grep "^${spec}:" $SPACK_ENV/.installs | cut -d: -f2)
        fi

        if [[ -n $spec_hash ]]; then
            if grep -q $spec_hash $SPACK_ENV/spack.lock; then
                skip_spec=true
            else
                sed -i "/.*${spec_hash}/d" $SPACK_ENV/.installs
            fi
        else
            spack_find_out=$(spack find -L $spec)

            if [[ $? == 0 ]]; then
                echo "${spec}:$(tail -n1 <<< $spack_find_out | cut -d' ' -f1)" >> $SPACK_ENV/.installs
                skip_spec=true
            fi
        fi

        set -e

        if [[ $skip_spec == true ]]; then
            tsecho "Skipping spec   $PCOL$spec$BCOL$type_msg$DCOL (reason: already installed)"
        else
            if [[ -n $install_type ]]; then
                tsecho "Installing spec $GCOL$spec $BCOL(${install_type})$DCOL$cache_label"
            else
                tsecho "Installing spec $GCOL$spec$DCOL$cache_label"
            fi

            log_cmd "$spec_cmd $spec" >> $log_specs
            $spec_cmd $spec &>> $log_specs
            install_spec

            if [[ $spec == lmod* ]]; then
                new_lmod=true
            fi
        fi
    fi

    if [[ $install_type == mpi ]]; then
        if [[ -n $comp ]]; then
            mpis[$comp]="${mpis[$comp]} ${spec//[[:blank:]]/}"
        else
            2>&1 echo "Error: cannot install an MPI without setting a compiler!"
            exit 1
        fi
    elif [[ $install_type == compiler ]]; then
        if [[ $spec == gcc* ]]; then
            compilers="${spec//[[:blank:]]/} $compilers"
        else
            compilers="$compilers ${spec//[[:blank:]]/}"
        fi
    fi
}

function install_spec {
    # Install the package and view pertinent log information
    log_cmd "$build_cmd $spec" >> $log_installs
    $build_cmd $spec |& tee -a $log_installs | stdbuf -oL sed 's/^/   /'    \
            | (grep -e "Executing phase" -e "Successfully installed"        \
            -e " Total: " -e " from binary cache" || true)

    if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
        echo -e "\nError: install of package $spec failed! Aborting installs ...\n"
        exit 1
    fi

    # Register the compiler in the YAML file if GCC or vendor module
    if [[ $install_type == compiler ]]; then
        if [[ -z $current_comps ]]; then
            current_comps=$(spack config get compilers | grep spec | cut -d: -f2)
        fi

        if [[ $current_comps != *${spec//[[:blank:]]/}* ]]; then
            tsecho "Registering $spec as a compiler in spack.yaml"

            if [[ $install_external == module ]]; then
                module_name=$(cut -d' ' -f1 <<< "${comp/@//}")
                (module purge; module load $module_name; spack compiler find > /dev/null)
            else
                spack compiler add $(spack location -i $comp) > /dev/null
            fi
        fi
    fi
}

function check_exclusions {
    for espec in ${install_exclude/,/ }; do
        if [[ $1 == ${espec}* ]]; then
            return 1
        fi
    done
}

function define_items {
    list_var=my_$1; unset $list_var
    restrict_var=install_$1

    if [[ -n ${!restrict_var} ]]; then
        for item in $2; do
            if [[ $item == ${!restrict_var}* ]]; then
                if [[ -n $list_var ]]; then
                    declare -g $list_var="${!list_var} $item"
                else
                    declare -g $list_var="$item"
                fi
            fi
        done
    else
        declare -g $list_var="${2# }"
    fi
}

# Pretty colors
GCOL="\033[1;32m" BCOL="\033[1;34m" PCOL="\033[1;35m" DCOL="\033[0m"

# Ensure log directory exists
log_dir=$SPACK_ENV/logs
mkdir -p $log_dir
log_specs=$log_dir/specs.$start_time
log_installs=$log_dir/installs.$start_time

# MPI libraries for each compiler
declare -A mpis

while read pkg; do
    if [[ $pkg == \#* ]]; then
        continue
    elif [[ $pkg != *'<'* ]] && [[ $pkg == *:* ]]; then
        # If compilers were added, we need to add GCCs to compiler list
        for ivar in ${!install_*}; do
            unset $ivar
        done
        
        install_build=true

        for mflag in $pkg; do
            case $mflag in
                *:)
                    install_mode=${mflag%:}
                    ;;
                *=*)
                    declare install_${mflag%=*}=${mflag#*=}
                    ;;
            esac
        done
    else
        unset comp mpi
        case $install_mode in
            mdep)
                define_items compilers "${install_compiler:-$compilers}"
                for comp in $my_compilers; do
                    check_exclusions $comp || continue
                    define_items mpis "${mpis[$comp]}"
                    for mpi in $my_mpis; do
                        check_exclusions $mpi || continue
                        prepare_spec
                        check_spec
                    done
                done
                ;;
            cdep)
                define_items compilers "$compilers"
                for comp in $my_compilers; do
                    check_exclusions $comp || continue
                    prepare_spec
                    check_spec
                done
                ;;
            singleton)
                prepare_spec
                check_spec
                ;;
            *)
                echo -e "\n====="
                echo "Error: unrecognized install mode: $install_mode"
                echo -e "       halting installs at $pkg\n"
                exit 1
                ;;
        esac
    fi
done < <(awk 'NF' $pkg_manifest)

if [[ $SPACK_ENV == $NCAR_SPACK_ENV_BUILD ]]; then
    . $my_dir/tools/make_localinit.sh build
fi

unset new_lmod
