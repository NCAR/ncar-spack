#!/bin/bash

function usage {
cat << EOF
Usage: $0 [MANIFEST]

Options
    -h                      show this help message
    -d, --dry-run           show what would be installed but do not make any changes
    -j, --buildjobs         number of build jobs to run (otherwise will use env default)

EOF
exit
}

if [[ " $@ " == *" -h "* ]]; then
    usage
fi

# Perform common script setup including environment checks
export my_dir="$( cd "$(dirname "$0")" ; pwd )"
. $my_dir/tools/init.sh
my_host=$(hostname)

# Defaults
pkg_manifest=$SPACK_ENV/packages.cfg
build_jobs=$(spack config get config | sed -n 's/^[ ]*build_jobs: \(.*\)/\1/p')
header_cmd='tee $log_installs'

while [[ $# -gt 0 ]]; do
    case $1 in
        -c|--prefer-cache)
            prefer_cache=yes
            ;;
        -d|--dry-run|--dryrun)
            header_cmd="cat"
            dry_run=true
            ;;
        -j|--buildjobs)
            build_jobs=$2
            shift
            ;;
        *)
            pkg_manifest=$1
            ;;
    esac

    shift
done

spec_cmd="spack spec -I -N -t -L"

if [[ -n $build_jobs ]]; then
    build_cmd="spack install --add -j $build_jobs"
else
    build_cmd="spack install --add"
fi

function prepare_spec {
    declare -g spec="$pkg" comp=${comp:-$install_compiler} mpi=${mpi:-$install_mpi}

    while [[ $spec == *:* ]]; do
        spec_opt="$(sed 's|.*<\([^>]*\)>.*|\1|' <<< "$spec")"
        IFS=: read opt_type opt_body <<< "$spec_opt"

        if [[ $comp == ${opt_type}* ]] || [[ $mpi == ${opt_type}* ]]; then
            spec="${spec/<$spec_opt>/$opt_body}"
        else
            # Make sure white space is trimmed using xargs
            spec=$(xargs <<< ${spec/<$spec_opt>})
            
            if [[ $opt_type == hash-ref ]]; then
                hash_ref="$opt_body"
                [[ -n $comp ]] && hash_ref="$hash_ref $comp"
                [[ -n $mpi ]]  && hash_ref="$hash_ref $mpi"
            elif [[ $opt_type == spec-ref ]]; then
                if [[ -z ${specs[$opt_body]} ]]; then
                    specs[$opt_body]="$spec"
                fi
            elif [[ $opt_type == cache ]]; then
                use_cache=${opt_body/never/no}
            fi
        fi
    done

    for spec_ref in $(xargs -n1 <<< ${!specs[@]} | tac | xargs); do
        spec="$(sed "s|%${spec_ref}%|^${specs[$spec_ref]}|g" <<< "$spec")"
    done

    # Remove any duplicate dependency references from the spec
    for spec_element in $spec; do
        if [[ $spec_element != ^* ]] || [[ " ${filter_spec[@]} " != *" $spec_element "* ]]; then
            filter_spec+=( $spec_element )
        fi
    done

    spec="${filter_spec[@]}"
    unset filter_spec

    [[ -n $comp ]] && spec="$(sed "s|%CMP%|%$comp|g;t;s|$| %$comp|" <<< "$spec")"
    [[ -n $mpi ]]  && spec="$(sed "s|%MPI%|^$mpi|g;t;s|$| ^$mpi|" <<< "$spec")"
    spec="$(sed -r "s/%gcc( |$)/%gcc@${sys_gcc}\1/g" <<< "$spec")"

    while [[ $spec == */%* ]]; do
        declare {hash_var,hash_ref}="$(sed 's|.*/%\([^%]*\).*|\1|' <<< "$spec")"
        [[ -n $comp ]] && hash_ref="$hash_ref $comp"
        [[ -n $mpi ]]  && hash_ref="$hash_ref $mpi"
        spec="$(sed "s/%${hash_var}%/${hashes["${hash_ref}"]}/g" <<< "$spec")"
        unset hash_var hash_ref
    done

    if [[ $spec == */%* ]]; then
        >&2 echo -e "\nError: spec still contains reference! ($spec)"
        exit 1
    fi
}

function check_spec {
    if [[ $install_type == mpi ]]; then
        if [[ -n $comp ]]; then
            mpis[$comp]="${mpis[$comp]} ${spec//[[:blank:]]/}"
        else
            >&2 echo "Error: cannot install an MPI without setting a compiler!"
            exit 1
        fi
    elif [[ $install_type == compiler ]]; then
        comp_spec="${spec//[[:blank:]]/}"

        if [[ $comp_spec == gcc* ]]; then
            compilers="$comp_spec $compilers"
        else
            if [[ $comp_spec == intel-oneapi-compilers-classic* ]]; then
                comp_spec="${comp_spec/intel-oneapi-compilers-classic/intel}"
            elif [[ $comp_spec == intel-oneapi-compilers* ]]; then
                comp_spec="${comp_spec/intel-oneapi-compilers/oneapi}"
            fi

            compilers="$compilers $comp_spec"
        fi
    fi
    
    if [[ $install_build == false ]]; then
        tsecho "Skipping spec   $PCOL$spec$BCOL$type_msg$DCOL (reason: build=false specified)"
    else
        skip_spec=false spec_hash=
        set +e

        if [[ -f $SPACK_ENV/.installs ]]; then
            spec_hash=$(awk -F: -v spec="$spec" '$1 == spec {print $2}' .installs)

            if [[ -n $spec_hash ]]; then
                if [[ " $start_hashes " == *" $spec_hash "* ]]; then
                    skip_spec=true
                else
                    sed -i "/.*:${spec_hash}.*/d" $SPACK_ENV/.installs
                fi
            fi
        fi
        
        set -e

        if [[ $skip_spec == false ]] && [[ $dry_run != true ]]; then
            spack_spec_out=$($spec_cmd $spec)
            spec_hash=$(grep -A2 ^Concretized <<< "$spack_spec_out" | tail -n1 | awk '{print $2}')

            if [[ " $start_hashes " == *" $spec_hash "* ]]; then
                echo "${spec}:$spec_hash:${use_cache:-yes}" >> $SPACK_ENV/.installs
                skip_spec=true
            fi
        fi

        # Register the hash if requested
        if [[ -n $hash_ref ]]; then
            hashes["$hash_ref"]=$spec_hash
            unset hash_ref 
        fi
       
        # Finalize cache status
        if [[ ${use_cache:-${prefer_cache:-no}} == yes ]]; then
            cache_label=" (cached)"
        fi

        if [[ $skip_spec == true ]]; then
            tsecho "Skipping spec   $PCOL$spec$BCOL$type_msg$DCOL (reason: already installed)"
        else
            if [[ -n $install_type ]]; then
                tsecho "Installing spec $GCOL$spec $BCOL(${install_type})$DCOL$cache_label"
            else
                tsecho "Installing spec $GCOL$spec$DCOL$cache_label"
            fi

            if [[ $dry_run != true ]]; then
                log_cmd "$spec_cmd $spec" >> $log_specs
                echo "$spack_spec_out" &>> $log_specs
                unset spack_spec_out
                install_spec
                echo "${spec}:$spec_hash:${use_cache:-yes}" >> $SPACK_ENV/.installs
            fi

            if [[ $spec == lmod* ]]; then
                new_lmod=true
            fi
        fi
        
        unset cache_label use_cache
    fi
}

function install_spec {
    if [[ $use_cache == no ]]; then
        spec_build_cmd="${build_cmd} --no-cache"
    elif [[ $prefer_cache == yes ]]; then
        spec_build_cmd="$build_cmd --cache-only"
    else
        spec_build_cmd="$build_cmd"
    fi

    # Install the package and view pertinent log information
    log_cmd "$build_cmd $spec" >> $log_installs
    $spec_build_cmd $spec |& tee -a $log_installs | stdbuf -oL sed 's/^/   /'    \
            | (grep -e "Executing phase" -e "Successfully installed" -e "already installed"     \
            -e " Total: " -e " from binary cache" -e " Error: " -e " Warning: " || true)

    if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
        >&2 echo -e "\nError: install of package $spec failed! Aborting installs ...\n"
        exit 1
    fi

    # Register the hash if requested
    if [[ -n $hash_ref ]]; then
        hashes["$hash_ref"]=$(tac $log_installs | grep -m1 " Successfully installed " | sed 's/.*-\(.*\)$/\1/')
        unset hash_ref 
    fi

    # Register the compiler in the YAML file if GCC or vendor module
    if [[ $install_type == compiler ]]; then
        if [[ -z $current_comps ]]; then
            current_comps=$(spack config get compilers | grep spec | cut -d: -f2)
        fi

        if [[ $current_comps != *${comp_spec}* ]] || [[ $install_register == replace ]]; then
            tsecho "Registering $comp_spec as a compiler in spack.yaml"

            if [[ $current_comps == *${comp_spec}* ]]; then
                tsecho "(replacing existing compiler $comp_spec)"
                spack compiler remove $comp_spec
            fi

            if [[ $install_external == module ]]; then
                module_name=$(cut -d' ' -f1 <<< "${spec/@//}")
                (module purge; module load $module_name; spack compiler find > /dev/null)
            else
                spack compiler add $(spack location -i $spec) > /dev/null
            fi
        fi
    fi
}

function check_exclusions {
    for espec in ${install_exclude//,/ }; do
        if [[ $1 == ${espec}* ]]; then
            return 1
        fi
    done
}

function define_items {
    list_var=my_$1; unset $list_var
    restrict_var=install_$1
    my_items=${2//,/ }

    if [[ -n ${!restrict_var} ]]; then
        my_limits=${!restrict_var//,/ }

        for item in $my_items; do
            for limit in $my_limits; do
                if [[ $item == ${limit}* ]]; then
                    if [[ -n $list_var ]]; then
                        declare -g $list_var="${!list_var} $item"
                    else
                        declare -g $list_var="$item"
                    fi
                fi
            done
        done
    else
        declare -g $list_var="${my_items# }"
    fi
}

# Pretty colors
GCOL="\033[1;32m" BCOL="\033[1;34m" PCOL="\033[1;35m" DCOL="\033[0m"

# Ensure log directory exists
log_dir=$SPACK_ENV/logs
mkdir -p $log_dir
log_specs=$log_dir/specs.$start_time
log_installs=$log_dir/installs.$start_time

# Detect version of system GCC
sys_gcc=$(gcc -v |& grep "gcc version" | cut -d' ' -f3)

# Detect Spack and builtin commits
spack_commit=$(cd $NCAR_SPACK_ROOT_DEPLOYMENT/spack; git rev-parse HEAD)

if [[ -d $NCAR_SPACK_ENV_BUILD/repos/builtin ]]; then
    builtin_commit=$(cd $NCAR_SPACK_ENV_BUILD/repos/builtin; git rev-parse HEAD)
else
    builtin_commit=$spack_commit
fi

if [[ $dry_run == true ]]; then
cat << EOF

*** DRY RUN REQUESTED - NO CHANGES WILL BE MADE! ***
EOF
fi

eval $header_cmd << EOF

Start time          = $start_time
Spack environment   = $SPACK_ENV
Package manifest    = $pkg_manifest
Spack version       = $spack_commit
Builtin version     = $builtin_commit
Build jobs          = $build_jobs
System GCC          = gcc@$sys_gcc

EOF

echo "Querying current explicit packages ..."
start_hashes=$(spack find -x --format '{hash}' | xargs)
echo -e "Processing install manifest ...\n"

# Associative arrays to store mpis and requested hashes
declare -A mpis hashes specs

while read pkg; do
    if [[ $pkg == \#* ]]; then
        continue
    elif [[ $pkg != *'<'* ]] && [[ $pkg == *:* ]]; then
        # If compilers were added, we need to add GCCs to compiler list
        for ivar in ${!install_*}; do
            unset $ivar
        done
        
        install_build=true

        for mflag in $pkg; do
            case $mflag in
                *:)
                    install_mode=${mflag%:}
                    ;;
                *=*)
                    declare install_${mflag%=*}=${mflag#*=}
                    ;;
            esac
        done
    else
        unset comp mpi
        case $install_mode in
            mdep)
                define_items compilers "${install_compiler:-$compilers}"
                for comp in $my_compilers; do
                    check_exclusions $comp || continue
                    define_items mpis "${mpis[$comp]}"
                    for mpi in $my_mpis; do
                        check_exclusions $mpi || continue
                        prepare_spec
                        check_spec
                    done
                done
                ;;
            cdep)
                define_items compilers "$compilers"
                for comp in $my_compilers; do
                    check_exclusions $comp || continue
                    prepare_spec
                    check_spec
                done
                ;;
            singleton)
                prepare_spec
                check_spec
                ;;
            *)
                echo -e "\n====="
                echo "Error: unrecognized install mode: $install_mode"
                echo -e "       halting installs at $pkg\n"
                exit 1
                ;;
        esac
    fi
done < <(awk 'NF' $pkg_manifest)

if [[ $dry_run != true ]] && [[ $SPACK_ENV == $NCAR_SPACK_ENV_BUILD ]]; then
    . $my_dir/tools/make_localinit.sh build
fi

unset new_lmod
