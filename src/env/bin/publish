#!/bin/bash
#
#   This script is designed to publish changes made in the build
#   environment to the production environment in a reproducible
#   and traceable way. The script does a number of things:
#
#   1. Sanity checks of current environment
#   2. Check to see that build spack.yaml and spack.lock are in sync
#   3. Check whether any changes need to be made to the public env
#   4. Sync build and public environment package installs
#   5. (Re)build the public module tree
#   6. Commit and push changes to Github repo
#
#   Note:   as of Spack v0.17, the activate scripts will break if
#           used with an environent already activated outside of a
#           shell script. So we must activate in the script!
#
#   Author:         Brian Vanderwende
#   Last Revised:   00:01, 15 Jun 2022
#

function create_gitignore {
cat > $NCAR_SPACK_ENV_PUBLIC/.gitignore << EOF
.spack-env
cache
logs
modules
opt
EOF

git add .gitignore
}

function create_manifest {
# Create package manifest for new installs
cat > $1 << EOF
# New package installs
# Start time: $start_time

singleton:
$(sed 's/-/ /' <<< "$new_pkgs")
EOF
}

#
## ---- INITIALIZATION ----
#

# Perform common script setup including environment checks
export my_dir="$( cd "$(dirname "$0")" ; pwd )"
. $my_dir/tools/init.sh

while [[ $# -gt 0 ]]; do
    case $1 in
        -d|--set-default)
            set_as_default=true
            ;;
        -f|--force)
            force_commit=true
            ;;
        *)
            commit_msg="$1"
            ;;
    esac

    shift
done

if [[ -z $commit_msg ]]; then
cat << EOF
Error:  You must provide a commit message as the only argument to this
        script. Make sure to put the message in quotes.

Usage:  publish "new install of very cool modules"

EOF
exit 1
fi

tsecho "Testing build environment for unconcretized changes"
conc_test=$(2>&1 taskset -c 0-7 spack concretize)

if [[ -n $conc_test ]] && [[ $conc_test != "==> Updating view at $SPACK_ENV/ncarenv" ]]; then
cat << EOF
$conc_test

Error:  Modifications to $SPACK_ENV/spack.yaml are not properly installed!
        Resolve spack.yaml <-> spack.lock inconsistency before attempting
        to push to the public environment.

EOF
exit 1
fi

# Make sure build cache is up to date
tsecho "Updating the spack build cache with latest binaries"
$SPACK_ENV/bin/populate_build_cache

#
## ---- INSPECT THE PUBLIC ENVIRONMENT ----
#

pad_length=$(awk '/padded_length: / {print $2}' $SPACK_ENV/spack.yaml)

tsecho "Converting build spack.yaml for use in public environment"
cd $SPACK_ENV; mkdir -p .prototype; spack env deactivate
sed '/  specs:/Q' spack.yaml > .prototype/spack.yaml

if [[ -f $NCAR_SPACK_ENV_PUBLIC/spack.yaml ]]; then
     sed -n '/  specs:/,$ p' $NCAR_SPACK_ENV_PUBLIC/spack.yaml >> .prototype/spack.yaml
fi

sed -i -r "s|^([^/]*).{$pad_length}|\1$SPACK_ROOT/opt/spack/|" .prototype/spack.yaml
sed -i "s|\([ ]*lmod: \)/.*|\1$NCAR_SPACK_ROOT_MODULES/$NCAR_SPACK_HOST_VERSION|" .prototype/spack.yaml
sed -i "/[ ]*view:.*/,/[ ]*root:.*/{s|\([ ]*root: \)/.*|\1$NCAR_SPACK_ROOT_VIEW|}" .prototype/spack.yaml
spack env activate .prototype
spack config remove 'config:install_tree:padded_length' 
spack config remove 'config:install_tree:root'
spack env deactivate

if [[ -d $NCAR_SPACK_ENV_PUBLIC ]]; then
    tsecho "Testing public environment for untracked changes"
    cd $NCAR_SPACK_ENV_PUBLIC
    if ! git diff --quiet || ! git diff --cached --quiet; then
        echo -e "Error:  Uncommitted changes in public repo. Resolve and then retry.\n"
        exit 1
    fi

    # TODO: Add git pull here 
    
    if cmp $NCAR_SPACK_ENV_BUILD/.prototype/spack.yaml spack.yaml >& /dev/null; then
        if [[ $force_commit == true ]]; then
            tsecho "No new packages but proceeding anyway (--force option enabled)"
        else
            echo -e "\nNo changes detected from public environment; exiting."
            exit 0
        fi
    fi
else
    tsecho "Initializing public environment and tracking repo"
    # TODO: Add code here to use github later
    echo
    git init $NCAR_SPACK_ENV_PUBLIC
    cd $NCAR_SPACK_ENV_PUBLIC
    git checkout -b main
    echo
    mkdir util
    create_gitignore
fi

# Finally, let's move the YAML file
mv $NCAR_SPACK_ENV_BUILD/.prototype/spack.yaml $NCAR_SPACK_ENV_PUBLIC/spack.yaml

# Switch to the production environment
spack env activate $NCAR_SPACK_ENV_PUBLIC
log_dir=$SPACK_ENV/logs
mkdir -p $log_dir

# If there are new packages, install sequentially to ensure determinism
new_pkgs=$(grep -v -f <(sed '1,/  specs:/d' spack.yaml) <(sed '1,/  specs:/d' $NCAR_SPACK_ENV_BUILD/spack.yaml) || [[ $? == 1 ]])

if [[ -n $new_pkgs ]]; then
    tsecho "Creating manifest and installing cached packages"
    pkg_manifest=$log_dir/manifest.$start_time
    create_manifest $pkg_manifest
    $my_dir/install_packages --cache-only $pkg_manifest

    # Check that installs completed successfully
    if [[ ${PIPESTATUS[0]} == 1 ]]; then
        echo "Error:  Spack installations did not complete successfully."
        echo "        Resolve errors before committing changes to GitHub manually."
        exit 1
    fi
fi

tsecho "Concretizing other environment changes"
2>&1 taskset -c 0-7 spack concretize > $log_dir/concretize.$start_time

tsecho "Refreshing module init scripts"
. $my_dir/tools/make_localinit.sh public

tsecho "Creating split configuration files for community use"
mkdir -p $SPACK_ENV/config

for cfg_file in config packages compilers modules mirrors repos; do
    sed -n "/^  ${cfg_file}:/,/^  [a-z]*:/p" spack.yaml | sed '$d; s/^  //' > $SPACK_ENV/config/${cfg_file}.yaml
done

tsecho "Pushing YAML, lock, util and config changes to GitHub"
echo
git add spack.yaml spack.lock util config
git commit -m "$commit_msg"
echo

# Create modules in build environment
tsecho "Generating modules in public environment"
spack module lmod refresh -y

if [[ -f $NCAR_SPACK_ENV_BUILD/bin/postprocess ]]; then
    tsecho "Running postprocessing script on environment"
    NCAR_SPACK_ENV_TYPE=public $NCAR_SPACK_ENV_BUILD/bin/postprocess
fi

if [[ ! -e $NCAR_SPACK_ROOT_DEPLOYMENT/util ]]; then
    for public_dir in util config; do
        ln -sf $SPACK_ENV/$public_dir $NCAR_SPACK_ROOT_DEPLOYMENT/$public_dir
    done
fi

if [[ ! -d $NCAR_SPACK_ROOT_PUBLIC/default ]] || [[ $set_as_default == true ]]; then
    tsecho "Setting environment as default public environment"
    ln -s $NCAR_SPACK_ROOT_DEPLOYMENT $NCAR_SPACK_ROOT_PUBLIC/default
fi
