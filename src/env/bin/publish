#!/bin/bash
#
#   This script is designed to publish changes made in the build
#   environment to the production environment in a reproducible
#   and traceable way. The script does a number of things:
#
#   1. Sanity checks of current environment
#   2. Check to see that build spack.yaml and spack.lock are in sync
#   3. Check whether any changes need to be made to the public env
#   4. Sync build and public environment package installs
#   5. (Re)build the public module tree
#   6. Commit and push changes to Github repo
#
#   Note:   as of Spack v0.17, the activate scripts will break if
#           used with an environent already activated outside of a
#           shell script. So we must activate in the script!
#
#   Author:         Brian Vanderwende
#   Last Revised:   17:29, 18 May 2022
#

function create_gitignore {
cat > $NCAR_SPACK_ENV_PUBLIC/.gitignore << EOF
.spack-env
cache
logs
modules
opt
EOF

git add .gitignore
}

#
## ---- INITIALIZATION ----
#

# Perform common script setup including environment checks
export my_dir="$( cd "$(dirname "$0")" ; pwd )"
. $my_dir/tools/init.sh

while [[ $# -gt 0 ]]; do
    case $1 in
        -f|--force)
            force_commit=true
            ;;
        *)
            commit_msg="$1"
            ;;
    esac

    shift
done

if [[ -z $commit_msg ]]; then
cat << EOF
Error:  You must provide a commit message as the only argument to this
        script. Make sure to put the message in quotes.

Usage:  publish "new install of very cool modules"

EOF
exit 1
fi

tsecho "Testing build environment for unconcretized changes"
conc_test=$(2>&1 taskset -c 0-7 spack concretize)

if [[ -n $conc_test ]]; then
cat << EOF
$conc_test

Error:  Modifications to $SPACK_ENV/spack.yaml are not properly installed!
        Resolve spack.yaml <-> spack.lock inconsistency before attempting
        to push to the public environment.

EOF
exit 1
fi

# Make sure build cache is up to date
tsecho "Updating the spack build cache with latest binaries"
$SPACK_ENV/bin/populate_build_cache

#
## ---- INSPECT THE PUBLIC ENVIRONMENT ----
#

pad_length=$(awk '/padded_length: / {print $2}' $SPACK_ENV/spack.yaml)

tsecho "Converting build spack.yaml for use in public environment"
cd $SPACK_ENV; mkdir -p .prototype; spack env deactivate
sed -r "s|^([^/]*).{$pad_length}|\1$SPACK_ROOT/opt/spack/|" spack.yaml > .prototype/spack.yaml
spack env activate .prototype
spack config remove 'config:install_tree:padded_length' 
spack config remove 'config:install_tree:root' 
sed -i "s|\( *lmod: \)/.*|\1$NCAR_SPACK_MODULEROOT|" .prototype/spack.yaml
spack env deactivate

if [[ -d $NCAR_SPACK_ENV_PUBLIC ]]; then
    tsecho "Testing public environment for untracked changes"
    cd $NCAR_SPACK_ENV_PUBLIC
    if ! git diff --quiet || ! git diff --cached --quiet; then
        echo -e "Error:  Uncommitted changes in public repo. Resolve and then retry.\n"
        exit 1
    fi

    # TODO: Add git pull here 
    
    if cmp $NCAR_SPACK_ENV_BUILD/.prototype/spack.yaml spack.yaml >& /dev/null; then
        if [[ $force_commit == true ]]; then
            tsecho "No new packages but proceeding anyway (--force option enabled)"
        else
            echo -e "\nNo changes detected from public environment; exiting."
            exit 0
        fi
    fi
else
    tsecho "Initializing public environment and tracking repo"
    # TODO: Add code here to use github later
    echo
    git init $NCAR_SPACK_ENV_PUBLIC
    cd $NCAR_SPACK_ENV_PUBLIC
    git checkout -b main
    echo
    mkdir util
    create_gitignore
fi

# Finally, let's move the YAML file
mv $NCAR_SPACK_ENV_BUILD/.prototype/spack.yaml $NCAR_SPACK_ENV_PUBLIC/spack.yaml

# Switch to the production environment
spack env activate $NCAR_SPACK_ENV_PUBLIC

# Store concretization results
mkdir -p logs
tsecho "Concretizing changes in production environment"
echo "  -> logging to $SPACK_ENV/logs/concretize"

cat >> logs/concretize << EOF

=================================================
   New packages concretized at $(date)
=================================================

$(2>&1 taskset -c 0-7 spack concretize)

EOF

# Now install new packages
tsecho "Installing new packages into public environment"
echo "  -> logging to $SPACK_ENV/logs/install"

cat >> logs/install << EOF

=================================================
   New packages installed at $(date)
=================================================

EOF

spack install --cache-only >> logs/install 2>&1

# Check that installs completed successfully
if [[ ${PIPESTATUS[0]} == 1 ]]; then
cat << EOF
Error:  Spack installations did not complete successfully.
        Check results in \$SPACK_ENV/logs/install and resolve
        errors before committing changes to GitHub manually.

EOF
exit 1
fi

. $my_dir/tools/make_localinit.sh public

tsecho "Linking util scripts into public cluster root"
if [[ ! -e $NCAR_SPACK_PUBLIC_ROOT/util ]]; then
    ln -s $SPACK_ENV/util $NCAR_SPACK_PUBLIC_ROOT/util
fi

tsecho "Creating split configuration files for community use"
mkdir -p $NCAR_SPACK_USER_CONFIG

for cfg_file in config packages compilers modules mirrors repos; do
    sed -n "/^  ${cfg_file}:/,/^  [a-z]*:/p" spack.yaml | sed '$d; s/^  //' > $NCAR_SPACK_USER_CONFIG/${cfg_file}.yaml
done

tsecho "Pushing YAML, lock, util changes to GitHub"
echo
git add spack.yaml spack.lock util/localinit.sh util/localinit.csh
git commit -m "$commit_msg"
echo

# Create modules in build environment
tsecho "Generating modules in public environment"
spack module lmod refresh -y

if [[ -f $NCAR_SPACK_ENV_BUILD/bin/postprocess ]]; then
    tsecho "Running postprocessing script on environment"
    NCAR_SPACK_ENV_TYPE=public $NCAR_SPACK_ENV_BUILD/bin/postprocess
fi
