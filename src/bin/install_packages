#!/bin/bash
#
#   This script is used to install packages into either the build or public environment.
#   Use this script instead of "spack install" to increasing logging, and simplify
#   buildout of stacks.
#
#   Note:   Registry setup has been moved to tools/init.sh to be shared with publish
#           and any other packages that need it
#
#   Author:         Brian Vanderwende
#   Last Revised:   12:53, 04 Apr 2024
#


function usage {
cat << EOF
Usage: $0 [MANIFEST]

Options
    -h                      show this help message
    -c, --prefer-cache      specify that cached versions of packages should be used
    -d, --dry-run           show what would be installed but do not make any changes
    -j, --buildjobs N       number of build jobs to run (otherwise will use env default)
    -p, --package-limit N   max number of packages to be installed at once (1 for sequential)
    -r, --refresh-registry  force refresh of package recipes in the registry
    -v, --verbose           provide details on actions *not* taken

EOF
exit
}

if [[ " $@ " == *" -h "* ]]; then
    usage
fi

# Perform common script setup including environment checks
export my_dir="$( cd "$(dirname "$0")" ; pwd )"
. $my_dir/tools/init.sh
my_host=$(hostname)

# Defaults
manifest_file=$SPACK_ENV/packages.cfg
build_jobs=$(spack config get config | sed -n 's/^[ ]*build_jobs: \(.*\)/\1/p')
header_cmd='tee $log_installs'

# Handle user input
while [[ $# -gt 0 ]]; do
    case $1 in
        -c|--prefer-cache)
            prefer_cache=yes
            ;;
        -d|--dry-run|--dryrun)
            header_cmd="cat"
            dry_run=true
            ;;
        -j|--build-jobs|--buildjobs)
            build_jobs=$2
            shift
            ;;
        -p|--package-limit)
            package_limit=$2
            shift
            ;;
        -r|--refresh-registry)
            refresh_registry=true
            ;;
        -v|--verbose)
            export log_verbosity=$((log_verbosity + 1))
            ;;
        --skip-checks)
            skip_checks=true
            ;;
        *)
            manifest_file=$1
            ;;
    esac

    shift
done

spec_cmd="spack spec -I -N -t -L"
build_cmd="spack install --include-build-deps"

function add_spec_to_view {
view_block=$(sed -n "/^  view:/,/^  [a-z]*:/=" $SPACK_ENV/spack.yaml | xargs | awk '{ print $1","$NF }')
if [[ $view_block != ',' ]]; then
select_start=$(sed -n "$view_block {/select:/=}" $SPACK_ENV/spack.yaml)
if [[ -z $select_start ]]; then
cat << EOF | sed -i "$(($(cut -d, -f2 <<< $view_block) - 1)) r /dev/stdin" $SPACK_ENV/spack.yaml
      select:
      - $1
EOF
elif [[ $(sed -n "$view_block s/[ ]*- ${1}$/true/p" $SPACK_ENV/spack.yaml) != true ]]; then
cat << EOF | sed -i "$select_start r /dev/stdin" $SPACK_ENV/spack.yaml
      - $1
EOF
fi
else
tsecho "Error: no view defined but $1 requests view access"
exit 1
fi
}

function add_spec_to_queue {
    for width in ${field_widths[@]}; do
        queue_config[$1]="${queue_config[$1]:+${queue_config[$1]}|}${!field_vars[$width]}"
    done

    # Use (expensive) Spack commands to reformat into canonical Spec ordering
    if [[ $dry_run != true ]]; then
        spec="$(spack python -c "import spack.cmd; spack.cmd.parse_specs('$(sed "s/'/\\\'/g" <<< $spec)')[0]")"
    fi

    queue_config[$1]="${queue_config[$1]}|$spec"
    install_queue="${install_queue:+${install_queue}|}$1"
}

function remove_spec_from_queue {
    unset queue_config[$1]
    install_queue=$(sed "s/${1}|*//; s/|$//" <<< $install_queue)
}

function add_spec_to_registry {
    IFS='|' read -a registry <<< ${queue_config[$1]}

    for n in ${!field_widths[@]}; do
        printf "%-${field_widths[$n]}s | " ${registry[$n]} >> $SPACK_ENV/registry
    done

    printf "%s\n" "${registry[-1]}" >> $SPACK_ENV/registry
}

function refresh_config {
    for opt in ${install_params//|/ }; do
        active_config[$opt]=${config[$opt]}
    done
}

function mask_spec {
    for my_mask in ${config[$1]}; do
        if [[ $2 == ${my_mask}* ]]; then
            return
        fi
    done

    echo fail
}

function prepare_spec {
    # Get package-specific configuration
    spec="$entry"

    while IFS=: read opt_types opt_body; do
        opt_types="${opt_types//,/ }"

        for opt_type in $opt_types; do
            declare pkg_$opt_type="$opt_body"
        done
    done < <(tr '<' '\n' <<< "$spec" | sed -n 's/\([^>]*\)>.*/\1/p')

    # Compile all block-level and package-level configurations
    config=()

    for opt_class in default block pkg; do
        opt_lookup=\${\!${opt_class}_*}
        opt_list="$(eval echo $opt_lookup)"

        for opt_var in $opt_list; do
            key=${opt_var#*_}
            config[$key]="${!opt_var}"
        done
    done

    unset ${!pkg_*}

    # Check for implications of compiler/mpi flags here
    for opt in compiler mpi compilers mpis exclude; do
        if [[ -n ${config[$opt]} ]]; then
            case $opt in
                compiler)
                    comp=${config[$opt]}
                    ;;
                mpi)
                    mpi=${config[$mpi]}
                    ;;
                compilers)
                    spec_check=${spec_check:-$(mask_spec compilers $comp)}
                    ;;
                mpis)
                    spec_check=${spec_check:-$(mask_spec mpis $mpi)}
                    ;;
                exclude)
                    for exclusion in ${config[$opt]//,/ }; do
                        if [[ $exclusion == [a-z]*%[a-z]* ]]; then
                            if [[ $mpi == ${exclusion%\%*}* ]] && [[ $comp == ${exclusion#*%}* ]]; then
                                spec_check=fail
                            fi
                        else
                            for condition in $comp $mpi; do
                                if [[ $condition == ${exclusion}* ]]; then
                                    spec_check=fail
                                fi
                            done
                        fi
                    done
                    ;;
            esac

            unset config[$opt]
        fi
    done

    # Skip this spec if any checks fail
    if [[ $spec_check == fail ]]; then
        unset spec_check
        return 1
    fi

    # Substitute compilers and MPIs
    [[ -n $comp ]] && spec="$(sed "s|\^%CMP%|\^$comp|g" <<< "$spec")"
    [[ -n $comp ]] && spec="$(sed "s|%CMP%|%$comp|g;t;s|$| %$comp|" <<< "$spec")"
    [[ -n $mpi ]]  && spec="$(sed "s|%MPI%|^$mpi|g;t;s|$| ^$mpi|" <<< "$spec")"
    spec="$(sed -r "s/%gcc( |$)/%gcc@${sys_gcc}\1/g" <<< "$spec")"

    # Substitute compiler/mpi-specific modifier flags
    for mod_type in $comp ${comp%@*} $mpi ${mpi%@*}; do
        if [[ -n ${config[$mod_type]} ]]; then
            spec="$(sed "s|<[^>]*${config[$mod_type]}>|${config[$mod_type]}|" <<< "$spec")"
        fi
    done

    # Remove all remaining package modifiers
    spec="$(sed 's/[ ]*<[^>]*>//g' <<< "$spec")"

    # Substitute spec and hash references and remove any duplicate dependencies
    while [[ $spec == *[/^]%* ]]; do
        declare {ref_label,ref_key}="$(sed 's|.*\([/^]%[^%]*%\).*|\1|' <<< "$spec")"
        [[ -n $comp ]] && ref_key="$ref_key $comp"
        [[ -n $mpi ]]  && ref_key="$ref_key $mpi"
        spec="$(sed "s/${ref_label}/${ref_dict["${ref_key}"]}/g" <<< "$spec")"
    done

    for spec_element in $spec; do
        if [[ $spec_element != ^* ]] || [[ " ${filter_spec[@]} " != *" $spec_element "* ]]; then
            filter_spec+=( $spec_element )
        fi
    done

    spec="${filter_spec[@]}"
    unset filter_spec

    if [[ $spec == */%* ]]; then
        tsecho "\nError: spec still contains reference! ($spec)"
        exit 1
    fi

    # Some other settings have side-effects. Handle them here.
    for opt in spec_ref hash_ref; do
        if [[ -n ${config[$opt]} ]]; then
            config[$opt]="%${config[$opt]}%"
            [[ -n $comp ]] && config[$opt]="${config[$opt]} $comp"
            [[ -n $mpi ]]  && config[$opt]="${config[$opt]} $mpi"

            if [[ $opt == spec_ref ]]; then
                tsecho " >> package will be stored using spec-reference" 2
            else
                tsecho " >> package will be stored using hash-reference" 2
            fi
        fi
    done

    if [[ ${#queue_config[@]} -gt 0 ]]; then
        for opt in ${install_params//|/ }; do
            if [[ ${#active_config[@]} -gt 0 ]] && [[ ${config[$opt]} != ${active_config[$opt]} ]]; then
                if [[ $opt == maxjobs ]] && [[ ${config[$opt]} -lt ${build_jobs:-1} ]]; then
                    trigger=true
                elif [[ $opt != publish ]]; then
                    trigger=true
                fi

                if [[ $trigger == true ]]; then
                    start_installs=true
                    tsecho " >> INSTALL TRIGGER - impending change in package install config: ${BCOL}$opt=${config[$opt]:-default}$DCOL" 2
                    unset trigger
                fi
            fi
        done
    fi
}

function compiler_checks {
    # Check if this spec is indeed a compiler and whether we are making changes
    if [[ ${config[type]} != compiler ]] || [[ ${config[register]} == no ]] || [[ $dry_run == true ]]; then
        return
    fi

    if [[ $current_comps != *${comp_spec}* ]]; then
        tsecho "Registering $comp_spec as a compiler in spack.yaml"
        comp_template=$NCAR_SPACK_ENV_BUILD/templates/compilers/${comp_spec%%@*}

        if [[ ! -f $comp_template ]]; then
            tsecho "Error: no compiler template found for $comp_spec"
        fi

        if [[ $current_comps == *${comp_spec}* ]]; then
            tsecho "(replacing existing compiler $comp_spec)"
            spack compiler remove $comp_spec
        fi

        if [[ -z $os ]]; then
            os=$(spack arch -o)
        fi

        if [[ ${config[build]:-true} == true ]]; then
            read -r root version <<< $(spack find --format "{prefix} {version}" $spec)
        else
            if [[ ${config[modifier]} == cray ]]; then
                root=/opt/cray
            else
                root=/usr
            fi

            version=${comp_spec#*@}
        fi

        sed -i 's/^\(  compilers:\)[ ]*\[\]/\1/' $SPACK_ENV/spack.yaml
        block_end=$(expr $(sed -n "1,/^  '*compilers[:']*/d;/^  [^- ].*/ {=;q}" spack.yaml) - 1)
        . $comp_template | sed -i "$block_end r /dev/stdin" $SPACK_ENV/spack.yaml
    fi
}

function check_registry {
    # Check whether certain settings on package have changed
    for n in ${!registry[@]}; do
        # The last entry is always the spec, which has variable length and is not checked
        if [[ ${registry[$n]} != ${registry[-1]} ]]; then
            width=$(($(wc -c <<< "${registry[$n]}") - 1))

            if [[ -n ${field_vars[$width]} ]]; then
                if [[ ${field_vars[$width]} == config\[*\] ]]; then
                    if [[ ${!field_vars[$width]// } != ${registry[$n]// } ]]; then
                        modify_registry=true
                    fi
                else
                    stripped_value=${registry[$n]// }
                    declare ${field_vars[$width]}=${stripped_value:-N/A}
                fi
            else
                tsecho "Error: invalid registry entry with field width $width!"
                exit 1
            fi
        fi
    done

    if [[ ${modify_registry:-false} == true ]] || [[ ${refresh_registry:-false} == true ]]; then
        tsecho " >> modifying outdated or broken registry entry" 2
        sed -i "/^${spec_hash} .*/d" $SPACK_ENV/registry
        add_spec_to_queue $spec_hash
        add_spec_to_registry $spec_hash
        remove_spec_from_queue $spec_hash
        unset modify_registry
    fi
}

function print_queue_status {
    if [[ $package_limit -ne 1 ]]; then
        tsecho "Beginning installs with ${#queue_config[@]} specs in the queue"
        tsecho " >> active config = $(declare -p active_config | cut -d= -f2-)"
    fi
}

function check_spec {
    if [[ ${config[type]} == mpi ]]; then
        if [[ -n $comp ]]; then
            mpis[$comp]="${mpis[$comp]:+${mpis[$comp]}$SEP}$spec"
        else
            tsecho "Error: cannot install an MPI without setting a compiler!"
            exit 1
        fi
    elif [[ ${config[type]} == compiler ]]; then
        comp_spec=$(sed "s/^\([^@+~ ]*\)[^@]*\(@[^+~ ]*\).*/\1\2/" <<< "$spec")

        if [[ $comp_spec == intel-oneapi-compilers-classic* ]]; then
            comp_spec="${comp_spec/intel-oneapi-compilers-classic/intel}"
            config[cache]=no
        elif [[ $comp_spec == intel-oneapi-compilers* ]]; then
            comp_spec="${comp_spec/intel-oneapi-compilers/oneapi}"
        elif [[ $comp_spec == llvm* ]]; then
            comp_spec="${comp_spec/llvm/clang}"
        fi

        if [[ ${config[register]:-yes} == yes ]]; then
            if [[ $comp_spec == gcc* ]]; then
                compilers="$comp_spec $compilers"
            else
                compilers="$compilers $comp_spec"
            fi
        fi
    fi

    if [[ ${config[build]} == false ]]; then
        tsecho "Skipping spec   $PCOL$spec$BCOL$type_msg$DCOL (reason: build=false specified)" 1
        compiler_checks
    else
        skip_spec=false spec_hash=
        registry_data=$(sed -n '3,$ s/ | /|/gp' $SPACK_ENV/registry | awk -F\| -v spec="$spec"      \
                '$NF == spec {print $0}')

        if [[ -n $registry_data ]]; then
            IFS='|' read -a registry <<< $registry_data
            spec_hash=${registry[0]}
            check_registry
            skip_spec=true
        fi

        if [[ $skip_spec == false ]]; then
            if [[ $dry_run != true ]]; then
                spack_spec_out=$(eval $spec_cmd $spec)
                spec_hash=$(grep -A2 ^Concretized <<< "$spack_spec_out" | tail -n1 | awk '{print $2}')

                if [[ " $start_hashes_all " == *" $spec_hash "* ]]; then
                    install_date=N/A add_spec_to_queue $spec_hash
                    add_spec_to_registry $spec_hash
                    remove_spec_from_queue $spec_hash
                    skip_spec=true

                    # Make sure spec is in spack.yaml
                    if [[ " $start_hashes " != *" $spec_hash "* ]]; then
                        eval spack add $spec > /dev/null
                    fi
                else
                    install_date=$(date +%FT%T) add_spec_to_queue $spec_hash
                fi
            else
                spec_hash=$((++fake_hash))
                add_spec_to_queue $spec_hash
            fi
        fi

        # Register the spec and/or hash if requested
        if [[ -n ${config[spec_ref]} ]]; then
            ref_list["^${config[$opt]}"]="^$spec"
        fi

        if [[ -n ${config[hash_ref]} ]]; then
            ref_list["/${config[$opt]}"]="/$spec_hash"
        fi

        if [[ ${#active_config[@]} -eq 0 ]]; then
            refresh_config
        fi

        # Finalize cache status
        if [[ $NCAR_SPACK_PAD_LENGTH != 0 ]]; then
            if [[ ${config[cache]:-${prefer_cache:-no}} == yes ]]; then
                cache_label=" (cached)"
            elif [[ ${config[cache]} == deps ]]; then
                cache_label=" (cached dependencies)"
            fi
        else
            active_config[cache]=no
        fi

        if [[ ${#queue_config[@]} -gt 0 ]] && [[ ${start_installs:-false} == true ]]; then
            print_queue_status

            if [[ $dry_run != true ]]; then
                install_specs
            else
                while read queued_hash; do
                    if [[ $queued_hash != $spec_hash ]]; then
                        remove_spec_from_queue $queued_hash
                    fi
                done < <(tr '|' '\n' <<< "$install_queue")

                unset start_installs
            fi
        fi

        if [[ $skip_spec == true ]]; then
            tsecho "Skipping spec   $PCOL$spec$BCOL$type_msg$DCOL (reason: already installed)" 1
            compiler_checks
        else
            if [[ -n ${config[type]} ]]; then
                tsecho "$spack_action $GCOL$spec $BCOL(${config[type]})$DCOL$cache_label"
            else
                tsecho "$spack_action $GCOL$spec$DCOL$cache_label"
            fi

            if [[ $package_limit -gt 0 ]] && [[ ${#queue_config[@]} -ge $package_limit ]]; then
                start_installs=true
            elif [[ ${config[type]} == compiler ]] && [[ ${config[register]} != no ]]; then
                start_installs=true
                tsecho " >> INSTALL TRIGGER - spec is a compiler and will be registered" 2
            fi

            if [[ $dry_run != true ]]; then
                log_cmd "$spec_cmd $spec" >> $log_specs
                echo "$spack_spec_out" &>> $log_specs
                unset spack_spec_out
                eval spack add $spec > /dev/null

                if [[ $spec == lmod* ]]; then
                    new_lmod=true
                fi
            fi
        fi

        unset cache_label
    fi

    # Activate new config for next block of installs
    refresh_config
}

function install_specs {
    if [[ ${active_config[cache]} == no ]]; then
        spec_build_cmd="${build_cmd} --use-buildcache never"
    elif [[ ${active_config[cache]} == deps ]]; then
        if [[ $prefer_cache == yes ]]; then
            spec_build_cmd="${build_cmd} --use-buildcache package:never,dependencies:only"
        else
            spec_build_cmd="${build_cmd} --use-buildcache package:never,dependencies:auto"
        fi
    elif [[ $prefer_cache == yes ]]; then
        spec_build_cmd="$build_cmd --use-buildcache only"
    else
        spec_build_cmd="$build_cmd"
    fi

    if [[ ${active_config[trust]:-no} == yes ]]; then
        spec_build_cmd="$spec_build_cmd --no-checksum --deprecated"
    fi

    spec_build_cmd="$spec_build_cmd -j ${active_config[maxjobs]:-${build_jobs:-1}}"

    # Install the package and view pertinent log information
    build_steps="$spec_build_cmd"

    while read queued_hash; do
        if [[ $queued_hash != $spec_hash ]]; then
            queued_spec=$(awk -F'|' '{print $NF}' <<< ${queue_config[$queued_hash]})
            build_steps="spack add ${queued_spec}${sep}$build_steps"
        fi
    done < <(tr '|' '\n' <<< "$install_queue")

    log_cmd "$build_steps" >> $log_installs
    spack concretize -j ${active_config[maxjobs]:-${build_jobs:-1}} -q > /dev/null
    $spec_build_cmd |& tee -a $log_installs | sed -u 's/^/   /' | (grep --line-buffered             \
            -e "Executing phase" -e "Successfully installed" -e "already installed" -e " Total: "   \
            -e " from binary cache" -e " Error: " -e "^See build log" -e "spack-build-out.txt"      \
            -e "Installing" | grep -v "Skipping external package" || true)

    if [[ ${PIPESTATUS[0]} -eq 0 ]]; then
        while read queued_hash; do
            if [[ $queued_hash != $spec_hash ]]; then
                add_date=$(date +%FT%T) add_spec_to_registry $queued_hash
                queued_spec=$(awk -F'|' '{print $NF}' <<< ${queue_config[$queued_hash]})
                remove_spec_from_queue $queued_hash

                # Modify spack.yaml based on access settings
                case ${active_config[access]:-module} in
                    core)
                        spec_name=$(spack find --format "{name}" $queued_hash)
                        spack config add "modules:default:lmod:core_specs:$spec_name"
                        ;;
                    view)
                        spack config add "modules:default:lmod:exclude:$queued_spec"
                        add_spec_to_view "$queued_spec"
                        ;;
                    none)
                        spack config add "modules:default:lmod:exclude:$queued_spec"
                        ;;
                esac
            fi
        done < <(tr '|' '\n' <<< "$install_queue")
    else
        # Remove failed specs to avoid uninstalled packages in spack.yaml
        bad_pkg=$(grep -e "==> Installing" -e "==> Error" $log_installs | grep -m1 -B1 "==> Error"  \
                | sed -n 's/.*Installing \(.*\) .*/\1/p')
        tsecho "Error: install of package $bad_pkg$ failed! Aborting installs ...\n"

        while read queued_hash; do
            if [[ $queued_hash != $spec_hash ]]; then
                if ! grep -q "Successful.*$queued_hash" $log_installs; then
                    queued_spec=$(awk -F'|' '{print $NF}' <<< ${queue_config[$queued_hash]})
                    eval spack remove $queued_spec
                fi
            fi
        done < <(tr '|' '\n' <<< "$install_queue")

        exit 1
    fi

    # Register the compiler in the YAML file
    compiler_checks

    unset start_installs
}

function handle_interrupt {
    if [[ ${user_stop:-false} == false ]]; then
        echo -e "\n*** User stop requested. Finishing current install (C-C again to kill) ...\n"
        user_stop=true
    else
        exit 1
    fi
}

function initialize_registry {
    for width in ${field_widths[@]}; do
        printf "%-${width}s | " "${field_labels[${field_vars[$width]}]}" >> $SPACK_ENV/.registry.tmp
    done

    printf "%s\n" "Descriptive Spec" >> $SPACK_ENV/.registry.tmp
    printf "%170s\n" | tr " " "-" >> $SPACK_ENV/.registry.tmp

    if [[ -f $SPACK_ENV/registry ]]; then
        while read entry; do
            spec_hash=$(awk '{print $1}' <<< "$entry")

            if [[ " $start_hashes " == *" $spec_hash "* ]]; then
                echo "$entry" >> $SPACK_ENV/.registry.tmp
            else
                if [[ -z $buffer_me ]]; then
                    echo; buffer_me=true
                fi

                spec="$(awk -F\| '{print $NF}' <<< "$entry")"
                tsecho "Removing missing spec $PCOL$spec$DCOL from registry" 1
            fi
        done < <(tail -n +3 $SPACK_ENV/registry)
        [[ $buffer_me ]] && echo
    fi

    mv $SPACK_ENV/.registry.tmp $SPACK_ENV/registry
}

# Set up signal handler to cleanly deal with interrupts
trap handle_interrupt SIGINT

# Ensure log directory exists
log_dir=$SPACK_ENV/logs
mkdir -p $log_dir
log_specs=$log_dir/specs.$start_time.${SUDO_USER:-$USER}
log_installs=$log_dir/installs.$start_time.${SUDO_USER:-$USER}

# Make sure environment reports current state
tsecho "Verify current environment concretization"
spack concretize -q

# Detect available compiler information
sys_gcc=$(gcc -v |& grep "gcc version" | cut -d' ' -f3)
current_comps=$(spack config get compilers | grep spec | cut -d: -f2)

# Detect Spack and builtin commits
tsecho "Detect Spack and repo versions"
spack_commit=$(cd $NCAR_SPACK_ROOT_DEPLOYMENT/spack; git rev-parse HEAD)

# Are we using sequential or concurrent install strategy?
reuse_packages=$(spack config get concretizer | grep reuse | awk -F": " '{print $2}')

if [[ -z $package_limit ]]; then
    if [[ ${reuse_packages,,} == false ]]; then
        package_limit=-1
    else
        package_limit=1
    fi
fi

if [[ $package_limit -eq 1 ]]; then
    spack_action="Installing spec"
elif [[ $package_limit -ge -1 ]]; then
    spack_action="Adding spec    "
    package_limit=${package_limit/0/-1}
else
    tsecho "Error: invalid --package-limit setting ($package_limit)"
    exit 1
fi

if [[ $dry_run == true ]]; then
cat << EOF

*** DRY RUN REQUESTED - NO CHANGES WILL BE MADE! ***
EOF
fi

eval $header_cmd << EOF

Start time          = $start_time
Spack environment   = $SPACK_ENV
Package manifest    = $manifest_file
Spack version       = $spack_commit
Concretizer reuse   = $reuse_packages

Build jobs          = $build_jobs
System GCC          = gcc@$sys_gcc
Concurrent builds   = ${package_limit/-1/unlimited}
Log verbosity       = ${log_verbosity:-0}

EOF

echo "Querying current explicit packages ..."
start_hashes=$(spack find -x --format '{hash}' | xargs)
start_hashes_all=$(spack find --format '{hash}' | xargs)
initialize_registry

echo -e "Processing install manifest ...\n"

# Associative arrays to store mpis and requested hashes
declare -A mpis ref_list config queue_config active_config

# Create some global tracking variables
spec= comp= mpi= start_installs= trigger_active=

while read entry; do
    if [[ ${skip_checks:-false} == false ]]; then
        if [[ $new_lmod == true ]] && ! module -v 2> /dev/null; then
            echo -e "\n====="
            echo "Notice: module command not in environment but Lmod just installed"
            echo "        to avoid install failures, halting installs at $entry"
            failed_checks=true
        else
            unset new_lmod
        fi

        if [[ $failed_checks == true ]]; then
            echo -e "       (use --skip-checks option to avoid this stoppage)\n"
            exit
        fi
    fi

    if [[ $entry == \#* ]] || [[ $user_stop == true ]]; then
        if [[ $entry == \#break ]] || [[ $user_stop == true ]]; then
            echo -e "\n >> User-requested an early stop in manifest\n"
            break
        fi
    elif [[ $entry != *'<'* ]] && [[ $entry == *:* ]]; then
        unset ${!block_*}
        block_build=true

        for mflag in $entry; do
            case $mflag in
                *:)
                    spec_type=${mflag%:}
                    ;;
                *=*)
                    declare block_${mflag%=*}=${mflag#*=}
                    ;;
            esac
        done
    else
        unset comp mpi

        case $spec_type in
            mdep)
                for comp in $compilers; do
                    while read mpi; do
                        prepare_spec || continue
                        check_spec
                    done <<< ${mpis[$comp]}
                done
                ;;
            cdep)
                for comp in $compilers; do
                    prepare_spec || continue
                    check_spec
                done
                ;;
            singleton)
                prepare_spec || continue
                check_spec
                ;;
            *)
                tsecho "Error: unrecognized spec type: $spec_type\n       halting installs at $entry\n"
                exit 1
                ;;
        esac
    fi
done < <(awk 'NF' $manifest_file)

# Perform any remaining installs
if [[ ${#queue_config[@]} -gt 0 ]]; then
    print_queue_status

    if [[ $dry_run != true ]]; then
        unset spec_hash
        install_specs
    fi
fi
