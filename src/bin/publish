#!/bin/bash
#
#   This script is designed to publish changes made in the build
#   environment to the production environment in a reproducible
#   and traceable way. The script does a number of things:
#
#   1. Sanity checks of current environment
#   2. Check to see that build spack.yaml and spack.lock are in sync
#   3. Check whether any changes need to be made to the public env
#   4. Sync build and public environment package installs
#   5. (Re)build the public module tree
#   6. Commit and push changes to Github repo
#
#   Note:   as of Spack v0.17, the activate scripts will break if
#           used with an environent already activated outside of a
#           shell script. So we must activate in the script!
#
#   Author:         Brian Vanderwende
#   Last Revised:   10:40, 17 Feb 2022
#

set -e
export my_name=$(basename "$0")
export my_dir="$( cd "$(dirname "$0")" ; pwd )"

function create_gitignore {
cat > $NCAR_SPACK_ENV_PUBLIC/.gitignore << EOF
.spack-env
cache
logs
modules
opt
EOF

git add .gitignore
}

#
## ---- INITIALIZATION ----
#

if [[ $# -eq 1 ]]; then
commit_msg="$1"
else
cat << EOF
Error:  You must provide a commit message as the only argument to this
        script. Make sure to put the message in quotes.

Usage:  publish "new install of very cool modules"

EOF
exit 1
fi

# Perform common script setup including envirnment checks
. $my_dir/tools/config_script.sh

tsecho "Testing build environment for unconcretized changes"
conc_test=$(2>&1 spack concretize)

if [[ -n $conc_test ]]; then
cat << EOF
$conc_test

Error:  Modifications to $SPACK_ENV/spack.yaml are not properly installed!
        Resolve spack.yaml <-> spack.lock inconsistency before attempting
        to push to the public environment.

EOF
exit 1
fi

# Source deployment settings
. $SPACK_ENV/setup/main.cfg

# Make sure build cache is up to date
tsecho "Updating the spack build cache with latest binaries"
$SPACK_ENV/bin/populate_build_cache $NCAR_SPACK_ENV_MIRROR
echo

#
## ---- INSPECT THE PUBLIC ENVIRONMENT ----
#

pad_length=$(awk '/padded_length: / {print $2}' $SPACK_ENV/spack.yaml)

tsecho "Converting build spack.yaml for use in public environment"
cp $SPACK_ENV/spack.yaml $SPACK_ENV/public.yaml
sed -i -r "s|^([^/]*).{$pad_length}|\1$NCAR_SPACK_ENV_PUBLIC/opt/|" $SPACK_ENV/public.yaml
sed -i "s|$NCAR_SPACK_ENV_CSG|$NCAR_SPACK_ENV_PUBLIC|g" $SPACK_ENV/public.yaml
sed -i '/padded_length: /d' $SPACK_ENV/public.yaml

if [[ -d $NCAR_SPACK_ENV_PUBLIC ]]; then
    tsecho "Testing public environment for untracked changes"
    cd $NCAR_SPACK_ENV_PUBLIC
    if ! git diff --quiet || ! git diff --cached --quiet; then
        echo -e "Error:  Uncommitted changes in public repo. Resolve and then retry.\n"
        exit 1
    fi

    # TODO: Add git pull here 
    
    if cmp public.yaml $NCAR_SPACK_ENV_PUBLIC/spack.yaml >& /dev/null; then
        echo "No changes detected from public environment"
        exit 0
    fi
else
    tsecho "Initializing public environment and tracking repo"
    # TODO: Add code here to use github later
    echo
    git init $NCAR_SPACK_ENV_PUBLIC
    cd $NCAR_SPACK_ENV_PUBLIC
    git checkout -b main
    echo
    mkdir util
    sed "s|$NCAR_SPACK_ENV_CSG|$NCAR_SPACK_ENV_PUBLIC|g" $SPACK_ENV/util/localinit.sh > util/localinit.sh
    sed "s|$NCAR_SPACK_ENV_CSG|$NCAR_SPACK_ENV_PUBLIC|g" $SPACK_ENV/util/localinit.csh > util/localinit.csh
    create_gitignore
fi

# Finally, let's move the YAML file
mv $SPACK_ENV/public.yaml spack.yaml

# Switch to the production environment
spack env deactivate
spack env activate .

# Store concretization results
mkdir -p logs
tsecho "Concretizing changes in production environment"
echo "  -> logging to $SPACK_ENV/logs/concretize"

cat >> logs/concretize << EOF

=================================================
   New packages concretized at $(date)
=================================================

$(2>&1 spack concretize)

EOF

# Now install new packages
tsecho "Installing new packages into public environment"
echo "  -> logging to $SPACK_ENV/logs/install"

cat >> logs/install << EOF

=================================================
   New packages installed at $(date)
=================================================

EOF

spack install >> logs/install 2>&1

# Check that installs completed successfully
if [[ ${PIPESTATUS[0]} == 1 ]]; then
cat << EOF
Error:  Spack installations did not complete successfully.
        Check results in \$SPACK_ENV/logs/install and resolve
        errors before committing changes to GitHub manually.

EOF
exit 1
fi

tsecho "Pushing YAML, lock, util changes to GitHub"
echo
git add spack.yaml spack.lock util/localinit.sh util/localinit.csh
git commit -m "$commit_msg"
echo

# Create modules in build environment
tsecho "Generating modules in public environment"
spack module lmod refresh -y
