#!/bin/bash
#
#   This script is designed to publish changes made in the build
#   environment to the production environment in a reproducible
#   and traceable way. The script does a number of things:
#
#   1. Sanity checks of current environment
#   2. Check to see that build spack.yaml and spack.lock are in sync
#   3. Check whether any changes need to be made to the public env
#   4. Sync build and public environment package installs
#   5. (Re)build the public module tree
#   6. Commit and push changes to Github repo
#
#   Note:   as of Spack v0.17, the activate scripts will break if
#           used with an environent already activated outside of a
#           shell script. So we must activate in the script!
#
#   Author:         Brian Vanderwende
#   Last Revised:   11:11, 01 Sep 2023
#

function remove_lock {
    if [[ $NCAR_SPACK_LOCK_PID ]]; then
        rm -f $NCAR_SPACK_ENV_BUILD/.publock
    fi
}

function create_gitignore {
cat > $NCAR_SPACK_ENV_PUBLIC/.gitignore << EOF
.spack-env
.installs
cache
logs
modules
opt
EOF

git add .gitignore
}

function create_git_readme {
cat > $NCAR_SPACK_ENV_PUBLIC/README.md << EOF
# NCAR Spack Deployment
This branch tracks the **production** deployment of Spack for the following configuration:

| | $NCAR_SPACK_HOST |
|--|--|
| Creation date | $(date) |
| ncar-spack commit | $NCAR_SPACK_DEPLOY_COMMIT |
| Host version | $NCAR_SPACK_HOST_VERSION |
| Spack version | $NCAR_SPACK_CLONE_VERSION |
| Deployment path | $NCAR_SPACK_ROOT_DEPLOYMENT |
| Environments path | $NCAR_SPACK_ROOT_ENVS |

This repository should *only* be updated via the \`publish\` script contained in the build environment. Any manual changes to this branch will cause headaches when you or another consultant attempt to publish new packages!
EOF

git add README.md
}

function create_manifest {
spack env deactivate
spack env activate $NCAR_SPACK_ENV_BUILD

# Create package manifest for new installs
cat > $1 << EOF
# New package installs
# Start time: $start_time

singleton:
EOF

while read spec; do
    spec_hash=$(spack find --format '{hash}' $spec 2> /dev/null || true)

    if [[ -z $spec_hash ]]; then
        tsecho "Error: package $spec not found in build environment!"
        exit 1
    fi

    use_cache=$(awk -F: -v spec="$spec_hash" '$2 == spec {print $3}' $NCAR_SPACK_ENV_BUILD/.installs)
    publish_pkg=$(awk -F: -v spec="$spec_hash" '$2 == spec {print $4}' $NCAR_SPACK_ENV_BUILD/.installs)

    if [[ ${publish_pkg:-yes} == yes ]]; then
        if [[ $use_cache == no ]]; then
            echo "    $spec <cache:no>" >> $1
        else
            echo "    $spec" >> $1
        fi
    fi
done < <(sed 's/^[ ]*- //' <<< $new_pkgs | sed '$!N; s/\n\s\s*\(.*\)/ \1/; P; D')

spack env deactivate
spack env activate $NCAR_SPACK_ENV_PUBLIC
}

function store_publish_options {
cat > $NCAR_SPACK_ENV_BUILD/.pubstore << EOF
force_commit=true
set_as_default=$set_as_default
commit_msg="$commit_msg"
EOF
}

function commit_error {
>&2 cat << EOF
Error:  You must provide a commit message as the only argument to this
        script. Make sure to put the message in quotes.

Usage:  publish "new install of very cool modules"

EOF
exit 1
}

#
## ---- INITIALIZATION ----
#

# Perform common script setup including environment checks
export my_dir="$( cd "$(dirname "$0")" ; pwd )"
. $my_dir/tools/init.sh

# Create lockfile to block other actions during publishing
trap remove_lock EXIT
export NCAR_SPACK_LOCK_PID=$$
echo $NCAR_SPACK_LOCK_PID > $NCAR_SPACK_ENV_BUILD/.publock
force_resume=N

while [[ $# -gt 0 ]]; do
    case $1 in
        -d|--set-default)
            set_as_default=true
            ;;
        -f|--force)
            force_commit=true
            ;;
        --resume)
            echo "Danger: You are asking to resume a failed publish."
            read -e -p "        Are you sure (y/N)? " force_resume
            ;;
        *)
            commit_msg="$1"
            ;;
    esac

    shift
done

if [[ YES == ${force_resume^^}* ]]; then
    if [[ -f $NCAR_SPACK_ENV_BUILD/.pubstore ]]; then
        . $NCAR_SPACK_ENV_BUILD/.pubstore
        tsecho "Resuming publish of commit $GCOL$commit_msg$DCOL"
    else
        tsecho "Error:  Prior publish attempt not found. Cannot resume."
        exit 1
    fi
elif [[ -z $commit_msg ]]; then
    commit_error
else
    store_publish_options
fi

tsecho "Testing build environment for unconcretized changes"
conc_test=$(2>&1 taskset -c 0-7 spack concretize |& grep -v -e "Updating view at" -e "Skipping external" || true)

if [[ -n $conc_test ]]; then
>&2 cat << EOF
$conc_test

Error:  Modifications to $SPACK_ENV/spack.yaml are not properly installed!
        Resolve spack.yaml <-> spack.lock inconsistency before attempting
        to push to the public environment.

EOF
exit 1
fi

# Make sure build cache is up to date
if [[ $NCAR_SPACK_PAD_LENGTH != 0 ]]; then
    tsecho "Updating the spack build cache with latest binaries"
    $SPACK_ENV/bin/populate_build_cache
else
    tsecho "Skipping build cache as caching is off"
fi

#
## ---- INSPECT THE PUBLIC ENVIRONMENT ----
#

pad_length=$(awk '/padded_length: / {print $2}' $SPACK_ENV/spack.yaml)

tsecho "Converting build spack.yaml for use in public environment"
cd $SPACK_ENV; mkdir -p .prototype; spack env deactivate
cp spack.yaml .prototype

if [[ -n $pad_length ]]; then
    sed -i -r "/${NCAR_SPACK_ENV_BUILD//\//\\/}/ s|^([^/]*).{$pad_length}|\1$SPACK_ROOT/opt/spack/|" .prototype/spack.yaml
fi

sed -i "s|\([ ]*lmod: \)/.*|\1$NCAR_SPACK_ROOT_MODULES/$NCAR_SPACK_HOST_VERSION|" .prototype/spack.yaml
sed -i "/[ ]*view:.*/,/[ ]*root:.*/{s|\([ ]*root: \)/.*|\1$NCAR_SPACK_ROOT_BASE/view|}" .prototype/spack.yaml

spack env activate .prototype

if [[ -n $pad_length ]]; then
    spack config remove 'config:install_tree:padded_length'
fi

spack config remove 'config:install_tree:root'
spack env deactivate

if [[ -d $NCAR_SPACK_ENV_PUBLIC ]]; then
    tsecho "Testing public environment for untracked changes"
    cd $NCAR_SPACK_ENV_PUBLIC

    local_branch="$(git rev-parse --abbrev-ref HEAD)"

    if [[ $(git rev-parse --abbrev-ref HEAD) != $NCAR_SPACK_HOST_VERSION ]]; then
        tsecho "Error:  Incorrect Git repo branch ($local_branch != $NCAR_SPACK_HOST_VERSION)."
        exit 1
    fi

    if ! git diff --quiet || ! git diff --cached --quiet; then
        if [[ ${force_resume,,} == y* ]]; then
            tsecho "Uncommited changes in Git repo but proceeding anyway (--resume option enabled)"
        else
            tsecho "Error:  Uncommitted changes in Git repo. Resolve and then retry.\n$(git status)\n"
            exit 1
        fi
    fi

    if cmp $NCAR_SPACK_ENV_BUILD/.prototype/spack.yaml spack.yaml >& /dev/null; then
        if [[ $force_commit == true ]]; then
            tsecho "No spack.yaml changes but proceeding anyway (--force option enabled)"
        else
            echo -e "\nNo changes detected from public environment; exiting."
            exit 0
        fi
    fi
    
    if [[ -n $NCAR_SPACK_GITHUB ]]; then
        tsecho "Checking that local and remote Git repos match"
        remote_commit=$(git ls-remote -h origin "$NCAR_SPACK_HOST_VERSION" | awk '{print $1}')
        local_commit=$(git rev-parse HEAD)
        
        if [[ $remote_commit != $local_commit ]]; then
            tsecho "Error:  Remote repo $NCAR_SPACK_GITHUB and local repo are not in sync."
            >&2 echo "           Remote: $remote_commit"
            >&2 echo -e "           Local:  $local_commit\n"
            exit 1
        fi
    fi
else
    tsecho "Initializing public environment and Git repo"
    echo
    git init $NCAR_SPACK_ENV_PUBLIC
    cd $NCAR_SPACK_ENV_PUBLIC
    
    if [[ -n $NCAR_SPACK_GITHUB ]]; then
        git remote add origin $NCAR_SPACK_GITHUB
    fi

    git checkout -b "$NCAR_SPACK_HOST_VERSION"
    echo
    create_gitignore
    create_git_readme

    git commit -m "Initialize repo with README and .gitignore"
    
    if [[ -n $NCAR_SPACK_GITHUB ]]; then
        git push -u origin "$NCAR_SPACK_HOST_VERSION"
    fi
fi

# Finally, let's move the YAML file
sed -i '/  specs:/Q' $NCAR_SPACK_ENV_BUILD/.prototype/spack.yaml

if [[ -f $NCAR_SPACK_ENV_PUBLIC/spack.yaml ]]; then
     sed -n '/  specs:/,$ p' $NCAR_SPACK_ENV_PUBLIC/spack.yaml >> $NCAR_SPACK_ENV_BUILD/.prototype/spack.yaml
fi

mv $NCAR_SPACK_ENV_BUILD/.prototype/spack.yaml $NCAR_SPACK_ENV_PUBLIC/spack.yaml

# Switch to the production environment
spack env activate $NCAR_SPACK_ENV_PUBLIC
log_dir=$SPACK_ENV/logs
mkdir -p $log_dir

# Ensure production YAML is in proper format
if grep -q -E '^ +specs: +\[' $SPACK_ENV/spack.yaml; then
    spack python $my_dir/tools/fix_specs.py
fi

# Find any packages to remove
rm_pkgs=$(grep -xv -f <(sed '1,/  specs:/d' $NCAR_SPACK_ENV_BUILD/spack.yaml) <(sed '1,/  specs:/d' spack.yaml) || [[ $? == 1 ]])

if [[ -n $rm_pkgs ]]; then
    tsecho "Removing packages that have been uninstalled from build"

    while read -r spec; do
        if [[ $(spack location -i $spec) == ${NCAR_SPACK_ROOT_DEPLOYMENT}* ]]; then
            spack uninstall --dependents --remove -y $spec
        elif sed -n '/^[ ]*specs:/,$ p' $SPACK_ENV/spack.yaml | grep -q "$spec"; then
            spack remove $spec
        fi
    done < <(sed 's/[ ]*- //' <<< $rm_pkgs | tac)
fi

# If there are new packages, install sequentially to ensure determinism
new_pkgs=$(grep -xv -f <(sed '1,/  specs:/d' spack.yaml) <(sed '1,/  specs:/d' $NCAR_SPACK_ENV_BUILD/spack.yaml) || [[ $? == 1 ]])

if [[ -n $new_pkgs ]]; then
    tsecho "Creating manifest and installing cached packages"
    pkg_manifest=$log_dir/manifest.$start_time
    create_manifest $pkg_manifest
    $my_dir/install_packages --skip-checks --prefer-cache $pkg_manifest

    # Check that installs completed successfully
    if [[ ${PIPESTATUS[0]} == 1 ]]; then
        tsecho "Error:  Spack installations did not complete successfully."
        echo "        Resolve errors before committing changes to GitHub manually."
        exit 1
    fi
fi

tsecho "Concretizing other environment changes"
2>&1 taskset -c 0-7 spack concretize > $log_dir/concretize.$start_time

tsecho "Ensure specs list is flow-style YAML"
if grep -q -E '^ +specs: +\[' $SPACK_ENV/spack.yaml; then
    spack python $my_dir/tools/fix_specs.py
fi

tsecho "Refreshing module init scripts"
. $my_dir/tools/make_localinit.sh public

tsecho "Creating split configuration files for community use"
mkdir -p $SPACK_ENV/config

for cfg_file in config packages compilers modules mirrors repos; do
    sed -n "/^  ${cfg_file}:/,/^  [a-z]*:/p" spack.yaml | sed '$d; s/^  //' > $SPACK_ENV/config/${cfg_file}.yaml
done

sed -i '/[ ]*roots:[ ]*/,+1d' $SPACK_ENV/config/modules.yaml

# Create modules in build environment
if [[ -n $NCAR_SPACK_ROOT_MODULES ]]; then
    tsecho "Generating modules in public environment"
    spack module lmod refresh -y
fi

if [[ -f $NCAR_SPACK_ENV_BUILD/bin/postprocess ]]; then
    tsecho "Running postprocessing script on environment"
    NCAR_SPACK_ENV_TYPE=public $NCAR_SPACK_ENV_BUILD/bin/postprocess 
fi

if [[ ! -e $NCAR_SPACK_ROOT_DEPLOYMENT/util ]]; then
    for public_dir in util config; do
        ln -sf $SPACK_ENV/$public_dir $NCAR_SPACK_ROOT_DEPLOYMENT/$public_dir
    done
fi

if [[ ! -d $NCAR_SPACK_ROOT_PUBLIC/default ]] || [[ $set_as_default == true ]]; then
    tsecho "Setting environment as default public environment"
    ln -sfn $NCAR_SPACK_ROOT_DEPLOYMENT $NCAR_SPACK_ROOT_PUBLIC/default
fi

tsecho "Committing YAML, lock, util and config changes to Git repo"
echo
git add spack.yaml spack.lock config

if [[ -d util ]]; then
    git add util
fi

git commit -m "$commit_msg"
echo

if [[ -n $NCAR_SPACK_GITHUB ]]; then
    tsecho "Pushing changes to GitHub"
    echo
    git push -u origin "$NCAR_SPACK_HOST_VERSION"
fi

# Commit succesful, so remove ability to resume it
rm -f $NCAR_SPACK_ENV_BUILD/.pubstore
