#!/bin/bash

# Perform common script setup including environment checks
export my_dir="$( cd "$(dirname "$0")" ; pwd )"
. $my_dir/tools/init.sh

log_dir=$SPACK_ENV/logs
mkdir -p $log_dir
log_file=$log_dir/externals.$start_time

function manual_external {
pkg_block=$(sed -n "/^  packages:/,/^  [^ ].*/ {/^    $pkg_name:/,/^    [^ ].*/=}" $1 | xargs | awk '{ print $1","$NF }')
if [[ $pkg_block != ',' ]]; then
ext_start=$(sed -n "$pkg_block {/externals:/=}" $1)
if [[ -n $ext_start ]]; then
cat << EOF | sed -i "$ext_start r /dev/stdin" $1
      - spec: $pkg_spec
        prefix: $pkg_path
EOF
else
cat << EOF | sed -i "$(cut -d, -f1 <<< $pkg_block) r /dev/stdin" $1
      externals:
      - spec: $pkg_spec
        prefix: $pkg_path
      buildable: false
EOF
fi
else
cat << EOF | sed -i '/^  packages:/ r /dev/stdin' $1
    $pkg_name:
      externals:
      - spec: $pkg_spec
        prefix: $pkg_path
      buildable: false
EOF
fi
}

function manual_upstream {
pkg_block=$(sed -n "/^  packages:/,/^  [^ ].*/ {/^    $pkg_name:/,/^    [^ ].*/=}" $1 | xargs | awk '{ print $1","$NF }')
if [[ $pkg_block != ',' ]]; then
req_start=$(sed -n "$pkg_block {/require:/=}" $1)
if [[ -z $req_start ]]; then
cat << EOF | sed -i "$(cut -d, -f1 <<< $pkg_block) r /dev/stdin" $1
      require: '${ext_meta}'
EOF
mod_yaml=1
fi
else
cat << EOF | sed -i '/^  packages:/ r /dev/stdin' $1
    $pkg_name:
      require: '${ext_meta}'
EOF
mod_yaml=1
fi

if [[ $mod_yaml == 1 ]]; then
tsecho "Set requirement   $GCOL$pkg_name (upstream)$DCOL"
unset mod_yaml
fi
}

function replace_paths {
    sed -i "s|fakepath-${pkg_name}-any|${pkg_path%/}|g" $1
    sed -i "s|fakepath-${pkg_name}-${pkg_version}|${pkg_path%/}|g" $1
}

# First, let's get the known external prefixes
known_externals=$(spack config get packages | grep prefix: | awk -F: '{print $2}' | sort | uniq | xargs)

# Add system packages as externals
if [[ -f $SPACK_ENV/externals.cfg ]]; then
    tsecho "Finding specified externals in externals.cfg"

    while read ext_entry; do
        IFS=" : " read ext_type ext_data <<< $ext_entry

        if [[ $ext_type == fixed ]]; then
            ext_flags=--not-buildable
        fi

        if [[ $ext_data == /* ]]; then
            ext_flags="$ext_flags --path"
            ext_path=$(cut -d= -f1 <<< $ext_data | xargs)
            ext_meta=$(cut -d= -f2 <<< $ext_data | xargs)
            
            if [[ $ext_path != *\[*\]* ]]; then
                2>&1 "Error: spec must be delimited in path by [*]!"
                exit 1
            fi

            search_expr=$(sed 's/\[.*\]/\\(\.\*\\)/' <<< $ext_path)
            pkg_paths=$(echo $(tr -d '[]' <<< $ext_path))
           
            for pkg_path in $pkg_paths; do
                pkg_spec=$(sed "s|$search_expr|\1|; s|/|@|" <<< $pkg_path)
                mod_yaml=0
               
                if [[ -d $pkg_path ]]; then
                    if [[ " $known_externals " != *" ${pkg_path%%/} "* ]]; then
                        pkg_name=${pkg_spec%@*}

                        if [[ $ext_type == upstream ]]; then
                            manual_upstream $NCAR_SPACK_ENV_BUILD/spack.yaml
                        else
                            pkg_version=${pkg_spec#*@}

                            if [[ $ext_meta != manual ]]; then
                                auto_result=$(spack external find $ext_flags $pkg_path $pkg_name)
                            else
                                unset auto_result
                            fi

                            if [[ $auto_result == *spack.yaml* ]]; then
                                tsecho "Adding external   $GCOL$pkg_spec$DCOL"
                            else
                                manual_external $NCAR_SPACK_ENV_BUILD/spack.yaml
                                tsecho "Adding external   $GCOL$pkg_name (manual)$DCOL"
                            fi

                            # Replace any found placeholder paths
                            replace_paths $NCAR_SPACK_ENV_BUILD/spack.yaml

                            known_externals="$known_externals ${pkg_path%%/}"
                        fi
                    fi
                elif [[ $pkg_path != *sbang ]]; then
                    tsecho "Skipping external $BCOL${pkg_spec} (not found!)$DCOL"
                fi
            done
        elif [[ $ext_type == upstream ]]; then
            ext_pkgs=$(cut -d= -f1 <<< $ext_data | xargs)
            ext_meta=$(cut -d= -f2 <<< $ext_data | xargs)

            for pkg_name in $ext_pkgs; do
                manual_upstream $NCAR_SPACK_ENV_BUILD/spack.yaml
            done
        else
            auto_result=$(spack external find $ext_flags $ext_data)

            if [[ $auto_result == *spack.yaml* ]]; then
                tsecho "Adding externals  $GCOL$(tail -n +2 <<< $auto_result | xargs)$DCOL"
            fi
        fi
    
        unset ext_flags auto_result ext_meta
    done < $SPACK_ENV/externals.cfg
fi
