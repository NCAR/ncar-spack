#!/bin/bash
#
#   Test spack deployment script for fresh environment standup
#
#   Author:         Brian Vanderwende
#   Last Revised:   20:37, 07 Sep 2021
#
#   Todo:
#       - Convert to ansible?
#

set -e
export NCAR_SPACK_DEPLOY_TIME=$(date +%y%m%d%H%M)
export NCAR_SPACK_DEPLOY_DIR="$( cd "$(dirname "$0")" ; pwd )"

#
## ---- INITIALIZATION ----
#

# Make sure environment is clean
if [[ -n $MODULEPATH_ROOT ]]; then
    $NCAR_SPACK_DEPLOY_DIR/bin/clean_bash $0 $@
    exit $?
fi

# Handle arguments
while [[ $# -gt 0 ]]; do
    KEY="$1"

    case $KEY in
        --nopkgs)
            SKIP_PKGS=yes
            ;;
        *)
            NCAR_SYS=$1
            ;;
    esac

    shift
done

if [[ -z $NCAR_SYS ]]; then
cat << EOF
Error:  deployment configuration must be specified!
Usage:  $0 [--nopkgs] CONFIG

EOF
exit 1
elif [[ ! -f $NCAR_SPACK_DEPLOY_DIR/clusters/$NCAR_SYS/deploy.cfg ]]; then
cat << EOF
Error:  deployment "$NCAR_SYS" not recognized from available options

EOF
exit 1
fi

# Perform user spack settings check
if find ~/.spack -name "config.yaml" | grep -q .; then
cat << EOF
Warning:    detected custom user settings (~/.spack/*/config.yaml)
            CONTAMINATION POSSIBLE!

EOF
fi

# Source global and env settings
. $NCAR_SPACK_DEPLOY_DIR/etc/global.cfg
. $NCAR_SPACK_DEPLOY_DIR/clusters/$NCAR_SYS/deploy.cfg

# HACK! -   Python3 is too old on Cheyenne and not installed at all
#           on Casper, so we add a compiled Python3 here. For future
#           deployments, make sure HSG has sufficient Python3 installed
if [[ $(hostname) == cheyenne* ]]; then
    export PATH=/glade/u/apps/ch/opt/python/3.7.9/gnu/9.1.0/bin:$PATH
else
    export PATH=/glade/u/apps/dav/opt/python/3.7.9/gnu/9.1.0/bin:$PATH
fi


# Activate spack installation
echo "Activating spack install at $NCAR_ROOT_SPACK ..."
. $NCAR_ROOT_SPACK/share/spack/setup-env.sh

cd $NCAR_SPACK_DEPLOY_DIR

#
## ---- CREATE AND CUSTOMIZE ENVS ----
#

if [[ -d $NCAR_SPACK_ENV_CSG ]]; then
cat << EOF
Error:  Existing environment found at ${NCAR_SPACK_ENV_CSG}. Will not
        overwrite. Resolve and rerun this script.

EOF
exit 1
fi

for NCAR_SPACK_ENV in $NCAR_SPACK_ENV_CSG $NCAR_SPACK_ENV_PUBLIC; do
    echo "Creating env at $NCAR_SPACK_ENV ..."

    # All spack needs for an env is a directory with spack.yaml
    mkdir -p $NCAR_SPACK_ENV
    cp clusters/$NCAR_SYS/spack.yaml $NCAR_SPACK_ENV
    cp -r clusters/$NCAR_SYS $NCAR_SPACK_ENV/setup
    cp -r util bin $NCAR_SPACK_ENV

    # Add relevant paths to spack.yaml
    sed -i "s|%INSTALLROOT%|${NCAR_SPACK_ENV}/opt|" $NCAR_SPACK_ENV/spack.yaml
    sed -i "s|%MODULESROOT%|${NCAR_SPACK_ENV}/modules|" $NCAR_SPACK_ENV/spack.yaml

    # Modify paths in localinit files
    sed -i "s|%SPACKROOT%|${NCAR_ROOT_SPACK}|" $NCAR_SPACK_ENV/util/localinit.*
    sed -i "s|%ENVROOT%|${NCAR_SPACK_ENV}|" $NCAR_SPACK_ENV/util/localinit.*
    sed -i "s|%LMODSYS%|${NCAR_SYS}|" $NCAR_SPACK_ENV/util/localinit.*
    sed -i "s|%DEFMODS%|${NCAR_DEFAULT_MODS}|" $NCAR_SPACK_ENV/util/localinit.*

    # Activate the environment
    spack env activate $NCAR_SPACK_ENV
    spack env status

    # Add system packages as externals
    echo -e "Finding specified externals in clusters/$NCAR_SYS/externals.cfg ...\n"
    spack external find --not-buildable $(grep fixed clusters/$NCAR_SYS/externals.cfg | cut -d: -f2) 
    spack external find $(grep buildable clusters/$NCAR_SYS/externals.cfg | cut -d: -f2)

    # Create mirror and prepare workshop to generate build_cache (binaries)
    if [[ $NCAR_SPACK_ENV == $NCAR_SPACK_ENV_CSG ]]; then
        spack config add "config:install_tree:padded_length:128"
        spack mirror create -d $NCAR_SPACK_ENV_MIRROR -a
        cp $NCAR_ROOT_SPACK/opt/spack/gpg/pubring.gpg $NCAR_SPACK_ENV_MIRROR/
    fi

    # Add local filesystem mirror
    spack mirror add $NCAR_SPACK_ENV_MIRROR_NAME $NCAR_SPACK_ENV_MIRROR

    # Add NCAR repos
    spack repo add $NCAR_SPACK_DEPLOY_DIR/repos/ncar.hpcd

    spack env deactivate
done

#
## ---- BUILD PACKAGES IN ENVIRONMENTS ----
#

if [[ ${SKIP_PKGS:-no} != yes ]]; then
    echo -e "Building packages in CSG build environment ...\n"
    # Build packages from source in build environment
    cd $NCAR_SPACK_ENV_CSG
    spack env activate .
    spack env status

    bin/install_packages setup/packages.cfg |& tee $NCAR_SPACK_ENV_CSG/setup/installs.log

    # Run script to populate the binary build_cache
    echo -e "Populating build cache with package binaries ...\n"
    bin/populate_build_cache $NCAR_SPACK_ENV_MIRROR |& tee $NCAR_SPACK_ENV_CSG/setup/cache.log

    # Create modules in build environment
    echo "Generating modules in build environment ..."
    spack module lmod refresh -y
    spack env deactivate
fi

# Status message
cat << EOF

===========================
    DEPLOYMENT COMPLETE
===========================

Machine:        $NCAR_SYS
Date:           $NCAR_SPACK_DEPLOY_TIME

Spack root:     $NCAR_ROOT_SPACK
Build root:     $NCAR_SPACK_ENV_CSG
Public root:    $NCAR_SPACK_ENV_PUBLIC

Install logs:   $NCAR_SPACK_ENV_CSG/setup/installs.log
Caching logs:   $NCAR_SPACK_ENV_CSG/setup/cache.log

*** First check that builds in CSG environment are valid! ***

To install into public production environment, run the following:

    spacktivate -p $NCAR_SPACK_ENV_PUBLIC
    $NCAR_SPACK_ENV_PUBLIC/bin/install_packages $NCAR_SPACK_ENV_PUBLIC/setup/packages.cfg
    spack modules lmod refresh -y
    despacktivate

EOF
