#!/bin/bash
#
#   Author:         Brian Vanderwende
#   Last Revised:   21:44, 15 Oct 2025
#

set -e
export NCAR_SPACK_DEPLOY_TIME=$(date +%y%m%dT%H%M)
export NCAR_SPACK_DEPLOY_DIR="$( cd "$(dirname "$0")" ; pwd )"
export NCAR_SPACK_DEPLOY_TYPE=testing

# Source functions from init script, but skip environment activation
NCAR_SPACK_SETUP_DEPLOY=1 . $NCAR_SPACK_DEPLOY_DIR/src/build/bin/tools/init.sh

function usage {
cat << EOF
Usage: $0 [OPTIONS] CLUSTER

This script is used to deploy a new Spack software stack based on a specified
cluster definition. A "build" environment will be created, and by default all
packages defined in the cluster's manifest will be built. Publishing will not
be done by this script.

Options
    -h, --help                  show this help message
    -b, --branch REF            override the branch of the CSG Spack fork to use
    -k, --key OPTION            determines behavior for GPG keys. options include:
                                    auto    - generate if not found at normal path
                                    PATH    - specify the path to a private GPG key
                                    new     - force generation of a new key
                                    none    - don't generate or import keys
    -p, --production            create a production deployment (must be csgteam)
    -r, --repo REF              override the branch of the CSG packages fork to use
    -s, --skip STEP1[,STEP2]        skip specified step of deployment process
                                    all         - skip all of the above
                                    constraints - don't add constraints
                                    keys        - don't set up GPG keys
                                    mirrors     - don't set up local+global mirrors
                                    packages    - don't install anything into build
                                    repos       - don't set up package repos
    --set-version VERSION       override version set in cluster definition

EOF
exit ${1:-0}
}

function export_gpg_key {
    echo
    tsecho "Exporting new GPG key to $key_root ..."
    spack gpg export $key_root/${key_user}-key.pub
    spack gpg export --secret $key_root/${key_user}-key.priv
    chmod 640 $key_root/${key_user}-key.*
    echo
}

#
## ---- INITIALIZATION ----
#

# Handle arguments
user_args=( "$@" )
gpg_opt=auto
key_root=/glade/work/$USER/operations/spack-keys
key_user=$(whoami | sed 's/csgteam/csg/')

while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
        -h|--help)
            usage
            ;;
        -b|--branch)
            custom_branch=$2
            shift
            ;;
        -k|--key)
            gpg_opt=$2
            shift
            ;;
        -p|--production)
            my_user=$(whoami)

            if [[ $my_user == csgteam ]]; then
                NCAR_SPACK_DEPLOY_TYPE=production
            else
                tsecho "Error: cannot create production deployment as $my_user"
                exit 1
            fi
            ;;
        -r|--repo)
            custom_repo=$2
            shift
            ;;
        -s|--skip)
            if [[ $1 == *=* ]]; then
                skip_steps=${1#*=}
            else
                skip_steps=$2
                shift
            fi

            skip_steps=" $(tr ',' ' ' <<< $skip_steps) "
            ;;
        --set-version)
            custom_version=$2

            if [[ -n $custom_version ]]; then
                tmp_file_path=$(mktemp ${TMPDIR:-/tmp}/ns-cluster.XXXXXXXX)
                shift
            else
                tsecho "Error: --set-version requires an argument"
                usage 1
            fi
            ;;
        -*)
            tsecho "Error: unrecognized option $key"
            usage 1
            ;;
        *)
            export NCAR_SYS=$1
            ;;
    esac

    shift
done

if [[ -z $NCAR_SYS ]]; then
    tsecho "Error: deployment configuration must be specified"
    usage 1
elif [[ ! -f $NCAR_SPACK_DEPLOY_DIR/clusters/$NCAR_SYS/main.cfg ]]; then
    tsecho "Error: deployment "$NCAR_SYS" not recognized from available options"
    exit 1
fi

# Source cluster settings
if [[ -n $tmp_file_path ]]; then
    settings_file=$tmp_file_path
    sed "s/\(NCAR_SPACK_HOST_VERSION=\).*/\1${custom_version}/" \
        $NCAR_SPACK_DEPLOY_DIR/clusters/$NCAR_SYS/main.cfg > $settings_file
else
    settings_file=$NCAR_SPACK_DEPLOY_DIR/clusters/$NCAR_SYS/main.cfg
fi

. $settings_file

# Check if Github repo exists
if [[ -n $NCAR_SPACK_GITHUB ]] && [[ $skip_github != yes ]]; then
    tsecho "Checking status of $NCAR_SPACK_GITHUB"
    
    if ! git ls-remote -h "$NCAR_SPACK_GITHUB" > /dev/null; then
        exit 1
    fi
fi

# Check key status
if [[ ! $gpg_opt =~ (auto|new|none) ]]; then
    if [[ ! -f $gpg_opt ]]; then
        tsecho "Error: No GPG key found at ${gpg_opt}.\n       Check input and try again."
        exit 1
    else
        gpg_key=$gpg_opt
    fi
elif [[ $gpg_opt == auto ]]; then
    if [[ -f $key_root/${key_user}-key.priv ]]; then
        gpg_key=$key_root/${key_user}-key.priv
    else
        gpg_opt=new
    fi
fi

#
## ---- INSTALL/CLONE SPACK FOR CLUSTER ----
#

spack_clone_path=$NCAR_SPACK_ROOT_DEPLOYMENT/spack

if [[ $NCAR_SPACK_ROOT != $spack_clone_path ]]; then 
    if [[ -d $NCAR_SPACK_ROOT_DEPLOYMENT ]]; then
        tsecho "Error:  Existing deployment found at ${NCAR_SPACK_ROOT_DEPLOYMENT}. Will not\n        overwrite. Resolve and rerun this script."
        exit 1
    fi

    # Install latest source from GitHub and checkout specified version
    tsecho "Installing Spack into ${GCOL}$spack_clone_path${DCOL}"
    git clone -c feature.manyFiles=true git@github.com:NCAR/csg-spack-fork.git $spack_clone_path
    echo
    cd $spack_clone_path

    if [[ -n $custom_branch ]]; then
        NCAR_SPACK_CUSTOM_BRANCH=$custom_branch
    fi

    if [[ -n $NCAR_SPACK_CUSTOM_BRANCH ]]; then
        tsecho " ==> Switching to custom branch ${PCOL}${NCAR_SPACK_CUSTOM_BRANCH}$DCOL"
        git checkout $NCAR_SPACK_CUSTOM_BRANCH
        echo
    elif git branch -r | grep -q /$NCAR_SPACK_HOST_VERSION; then
        tsecho " ==> Switching to existing version branch ${PCOL}${NCAR_SPACK_HOST_VERSION}$DCOL"
        git checkout $NCAR_SPACK_HOST_VERSION
        echo
    fi

    # Check whether Spack should use new spec output
    if git merge-base --is-ancestor 6f948eb847c46a9caea852d3ffffd9cd4575dacc HEAD; then
        export NCAR_SPACK_SPEC_FORMAT=new
    else
        export NCAR_SPACK_SPEC_FORMAT=old
    fi

    # Add original Spack repo as an upstream for checking out recipe updates
    git remote add upstream git@github.com:spack/spack.git

    # Copy NCAR scripts into the clone
    cp -r $NCAR_SPACK_DEPLOY_DIR/src/spack/* $spack_clone_path

    # Set prompt label in clean_bash script
    sed -i "s/\[clean\]/\[${NCAR_SPACK_HOST}-${NCAR_SPACK_HOST_VERSION}\]/" $spack_clone_path/bin/clean_bash

    # If exists, use Spack utils repo for Python
    if [[ -d $NCAR_SPACK_PYTHON_ROOT ]]; then
        sed -i "s|^\(NCAR_SPACK_PYTHON_ROOT=\).*|\1$NCAR_SPACK_PYTHON_ROOT|" $spack_clone_path/share/ncar/init.sh
    fi

    # Add custom cluster source files if found
    if [[ -d $NCAR_SPACK_DEPLOY_DIR/clusters/$NCAR_SYS/src/spack ]]; then
        cp -r $NCAR_SPACK_DEPLOY_DIR/clusters/$NCAR_SYS/src/spack/* $spack_clone_path/
    fi

    if [[ -n $NCAR_SPACK_PYDIR ]]; then
        sed -i "/^env_args=/a NCAR_SPACK_PYDIR=$NCAR_SPACK_PYDIR" $spack_clone_path/bin/clean_bash
    fi

    # Copy any found licenses to Spack install
    if [[ -d $NCAR_SPACK_DEPLOY_DIR/clusters/$NCAR_SYS/licenses ]]; then
        cp -rL $NCAR_SPACK_DEPLOY_DIR/clusters/$NCAR_SYS/licenses $spack_clone_path/etc/spack/
    fi

    # Modify permissions
    chmod -R a=rX,u+w $spack_clone_path

    if [[ $key_user == csg ]]; then
        chgrp -R csgteam $spack_clone_path
    fi

    # Activate spack installation
    . $spack_clone_path/share/spack/setup-env.sh

    # Pull builtin package repo
    if [[ ! $skip_steps =~ " "(repos|all)" " ]]; then
        tsecho "Pulling builtin package repo into Spack clone"
        spack repo update builtin

        repo_path=$(spack repo ls | awk '$0 ~ /builtin/ { print $NF }')
        cd $repo_path
        git remote set-url origin git@github.com:NCAR/csg-spack-packages.git
        git remote add upstream git@github.com:spack/spack-packages.git
        echo
        
        if [[ -n $custom_repo ]]; then
            NCAR_SPACK_PACKAGES_BRANCH=$custom_repo
        fi
        
        if [[ -n $NCAR_SPACK_PACKAGES_BRANCH ]]; then
            echo
            tsecho " ==> Switching to packages repo branch ${PCOL}${NCAR_SPACK_PACKAGES_BRANCH}$DCOL"
            git fetch
            git checkout origin/$NCAR_SPACK_PACKAGES_BRANCH
            echo
        fi
        
        cd - > /dev/null
    fi

    # Create trusted GPG key in spack install
    if [[ ! $skip_steps =~ " "(keys|all)" "  ]]; then
        if [[ $gpg_opt == new ]]; then
            if [[ $key_user == csg ]]; then
                key_person="NCAR HPC Consulting"
            else
                key_person="$(getent passwd $key_user | awk -F[,:] '{ print $5 }')"
            fi

            tsecho "Creating trusted GPG key for build cache creation"
            spack gpg create "$key_person" "<$key_user@ucar.edu>"

            if [[ -f $key_root/${key_user}-key.priv ]]; then
                read -p "GPG key already exists. Overwrite (y/N)? " clobber_key
                clobber_key=${clobber_key:-no}

                if [[ yes == ${clobber_key,,}* ]]; then
                    echo "Backing up old key ..."
                    mkdir $key_root/backup.$NCAR_SPACK_DEPLOY_TIME
                    mv $key_root/${key_user}-key.* $key_root/backup.$NCAR_SPACK_DEPLOY_TIME
                    export_gpg_key
                fi
            else
                mkdir -p $key_root
                export_gpg_key
            fi
        elif [[ -n $gpg_key ]]; then
            tsecho "Trusting existing GPG key"
            spack gpg trust $gpg_key
            echo
        fi
    fi

    tsecho "Activating new spack installation"
    
    # Make sure environment is clean
    cd $NCAR_SPACK_DEPLOY_DIR
    $spack_clone_path/bin/clean_bash $0 "${user_args[@]}"
    exit $?
else
    # Activate spack installation
    . $NCAR_SPACK_STARTUP
fi

#
## ---- CREATE AND CUSTOMIZE ENV ----
#

if [[ -d $NCAR_SPACK_ENV_BUILD ]]; then
>&2 cat << EOF
Error:  Existing environment found at ${NCAR_SPACK_ENV_BUILD}. Will not
        overwrite. Resolve and rerun this script.

EOF
exit 1
fi

tsecho "Creating env at ${GCOL}${NCAR_SPACK_ENV_BUILD}$DCOL"

# All spack needs for an env is a directory with spack.yaml
mkdir -p $NCAR_SPACK_ENV_BUILD/logs
cp clusters/$NCAR_SYS/spack.yaml $NCAR_SPACK_ENV_BUILD
cp -r src/build/* $NCAR_SPACK_ENV_BUILD

cat > $NCAR_SPACK_ENV_BUILD/main.cfg << EOF
NCAR_SPACK_DEPLOY_TYPE=$NCAR_SPACK_DEPLOY_TYPE
NCAR_SPACK_DEPLOY_COMMIT=$(git rev-parse HEAD)
NCAR_SPACK_SPEC_FORMAT=$NCAR_SPACK_SPEC_FORMAT

EOF

envsubst '$USER,$NCAR_SYS' < $settings_file >> $NCAR_SPACK_ENV_BUILD/main.cfg

if [[ -n $tmp_file_path ]]; then
    rm -f $tmp_file_path
fi

# Override the normal version if set at the command-line
if [[ -n $custom_version ]]; then
    sed -i "s/\(NCAR_SPACK_HOST_VERSION=\).*/\1${custom_version}/" $NCAR_SPACK_ENV_BUILD/main.cfg
fi

cp clusters/$NCAR_SYS/packages.cfg $NCAR_SPACK_ENV_BUILD
cp -r templates $NCAR_SPACK_ENV_BUILD

if [[ -d clusters/$NCAR_SYS/templates ]]; then
    cp -r clusters/$NCAR_SYS/templates $NCAR_SPACK_ENV_BUILD
fi

if [[ -e clusters/$NCAR_SYS/postprocess ]]; then
    cp -r -L clusters/$NCAR_SYS/postprocess $NCAR_SPACK_ENV_BUILD
fi

# Make cluster-specific substitutions in spack.yaml
sed -i "s|%HOST%|$NCAR_SPACK_HOST|" $NCAR_SPACK_ENV_BUILD/spack.yaml
sed -i "s|%VERSION%|$NCAR_SPACK_HOST_VERSION|" $NCAR_SPACK_ENV_BUILD/spack.yaml
sed -i "s|%DEPLOYMENT%|${NCAR_SPACK_HOST}/$NCAR_SPACK_HOST_VERSION|" $NCAR_SPACK_ENV_BUILD/spack.yaml
sed -i "s|%INSTALLROOT%|${NCAR_SPACK_ENV_BUILD}/opt|" $NCAR_SPACK_ENV_BUILD/spack.yaml
sed -i "s|%MODULESROOT%|${NCAR_SPACK_ENV_BUILD}/modules/$NCAR_SPACK_HOST_VERSION|" $NCAR_SPACK_ENV_BUILD/spack.yaml
sed -i "s|%BASEROOT%|$NCAR_SPACK_ENV_BUILD|" $NCAR_SPACK_ENV_BUILD/spack.yaml
sed -i "s|%TMPROOT%|$NCAR_SPACK_TMPROOT|g" $NCAR_SPACK_ENV_BUILD/spack.yaml

# Activate the environment
spack env activate $NCAR_SPACK_ENV_BUILD
spack env status

# Make sure packages are concretized separately (to allow multiple variants)
spack config add 'concretizer:unify:false'

# Set Spack-version specific bootstrap path to avoid conflicts
tsecho "Set bookstrap location to ${GCOL}${NCAR_SPACK_ROOT_BOOTSTRAP}$DCOL"
spack bootstrap root $NCAR_SPACK_ROOT_BOOTSTRAP

# Add package constraints from initial config file
if [[ -f clusters/$NCAR_SYS/constraints.cfg ]]; then
    cp clusters/$NCAR_SYS/constraints.cfg $NCAR_SPACK_ENV_BUILD
    
    if [[ ! $skip_steps =~ " "(constraints|all)" "  ]]; then
        tsecho "Setting package constraints"
        $NCAR_SPACK_ENV_BUILD/bin/add_constraints
        echo
    fi
fi

# Detect available external compilers (e.g., Cray compilers)
if [[ ${NCAR_SPACK_DETECT_COMPILERS:-false} == true ]]; then
    spack compiler find
fi

# Create mirrors and prepare env to generate build_cache binaries
if [[ $NCAR_SPACK_PAD_LENGTH != 0 ]]; then
    spack config add "config:install_tree:padded_length:${NCAR_SPACK_PAD_LENGTH:-128}"
fi

signing_keys=$(spack gpg list --signing | awk 'f{print;f=0} /^sec /{f=1}')

if [[ ! $skip_steps =~ " "(mirrors|all)" "  ]]; then
    for mtype in LOCAL GLOBAL; do
        mirror_variable=NCAR_SPACK_MIRROR_${mtype}
        mirror=${!mirror_variable}

        if [[ -n $mirror ]]; then
            tsecho "Adding mirror ${GCOL}${mirror}$DCOL"
            if [[ $mirror == /* ]] && [[ ! -d $mirror ]]; then
                if [[ $(sed 's/production/GLOBAL/;s/testing/LOCAL/' <<< $NCAR_SPACK_DEPLOY_TYPE) == $mtype ]]; then
                    spack mirror create -d $mirror -a
                fi
            fi

            # Only use S3 as writable cache in production
            if [[ $NCAR_SPACK_DEPLOY_TYPE != production ]]; then
                mirror=$(sed 's|s3://|https://stratus.ucar.edu/|' <<< $mirror)
            fi

            spack mirror add ncar_mirror_${mtype,,} $mirror

            # Make sure signing keys are pushed (and index regenerated!)
            if [[ $mirror != https* ]]; then
                for key in $signing_keys; do
                    spack gpg publish --rebuild-index -m ncar_mirror_${mtype,,} $key
                done
            fi
        fi
    done

    # Install any known keys from the cache
    tsecho "Adding trusted keys from buildcaches"
    spack buildcache keys --install --trust
    echo
fi

# Add custom repos
if [[ -f clusters/$NCAR_SYS/repos.cfg ]]; then
    while read -r repo; do
        spack repo add $repo
    done < clusters/$NCAR_SYS/repos.cfg
fi

# Add NCAR templates
spack config add "config:template_dirs:$SPACK_ENV/templates/modules"

# Add any requested upstreams
if [[ -f clusters/$NCAR_SYS/upstreams.cfg ]]; then
    while read -r upstream_name upstream_path; do
        spack config add "upstreams:${upstream_name}:install_tree:$upstream_path"
    done < clusters/$NCAR_SYS/upstreams.cfg
fi

#
## ---- BUILD PACKAGES IN ENVIRONMENTS ----
#

if [[ ! $skip_steps =~ " "(packages|all)" "  ]]; then
    tsecho "Building packages in build environment"
    echo

    # Build packages from source in build environment
    cd $NCAR_SPACK_ENV_BUILD
    bin/install_packages

    # Run script to populate the binary build_cache
    if [[ $NCAR_SPACK_PAD_LENGTH != 0 ]]; then
        tsecho "Populating build cache with package binaries"
        echo
        bin/populate_build_cache
    else
        tsecho "Skipping build cache due to pad length = 0"
    fi

    # Create modules in build environment
    if [[ -n $NCAR_SPACK_ROOT_MODULES ]]; then
        tsecho "Generating modules in build environment"
        spack module lmod refresh -y
    fi

    # Some clusters (e.g., Cray) need to run extra commands to prep environment
    if [[ -f $NCAR_SPACK_ENV_BUILD/bin/postprocess ]]; then
        tsecho "Running postprocessing on the build environment"
        $NCAR_SPACK_ENV_BUILD/bin/postprocess
    fi
fi

spack env deactivate

# Status message
cat << EOF

===========================
    DEPLOYMENT COMPLETE
===========================

Machine:        $NCAR_SYS
Date:           $NCAR_SPACK_DEPLOY_TIME
Type:           $NCAR_SPACK_DEPLOY_TYPE

Spack root:     $SPACK_ROOT
Build root:     $NCAR_SPACK_ENV_BUILD
Public root:    $NCAR_SPACK_ENV_PUBLIC

Github repo:    $NCAR_SPACK_GITHUB
Spack branch:   ${NCAR_SPACK_CUSTOM_BRANCH:-ncar-mods}
Pkgs branch:    ${NCAR_SPACK_PACKAGES_BRANCH:-ncar-mods}

EOF

if [[ ${skip_pkgs:-no} != yes ]]; then
cat << EOF
Install logs:   $NCAR_SPACK_ENV_BUILD/logs/installs.$NCAR_SPACK_DEPLOY_TIME
Caching logs:   $NCAR_SPACK_ENV_BUILD/logs/cache.$NCAR_SPACK_DEPLOY_TIME

EOF
fi

cat << EOF
*** First check that builds in build environment are valid! ***

To install into $NCAR_SPACK_DEPLOY_TYPE public environment, run the following:

$NCAR_SPACK_ENV_BUILD/bin/publish "Initial deployment of environment on $NCAR_SYS"

EOF
