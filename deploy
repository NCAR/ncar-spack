#!/bin/bash
#
#   This script is used to deploy a new "build" environment based on
#   a specified cluster definition. 
#
#   Author:         Brian Vanderwende
#   Last Revised:   14:16, 07 Mar 2024
#

set -e
export NCAR_SPACK_DEPLOY_TIME=$(date +%y%m%dT%H%M)
export NCAR_SPACK_DEPLOY_DIR="$( cd "$(dirname "$0")" ; pwd )"
export NCAR_SPACK_DEPLOY_TYPE=testing

function usage {
cat << EOF
Usage: $0 [OPTIONS] CLUSTER

Options
    -h, --help                  show this help message
    -b, --spack-branch          override the branch of the CSG Spack fork to use
    -k, --key OPTION            determines behavior for GPG keys. options include:
                                    auto    - generate if not found at normal path
                                    PATH    - specify the path to a private GPG key
                                    new     - force generation of a new key
                                    none    - don't generate or import keys
    -n, --no-pkgs               don't install packages, only set up deployment
    -p, --production            create a production deployment (must be csgteam)
    --set-version VERSION       override version set in cluster definition

EOF
exit ${1:-0}
}

function export_gpg_key {
    echo -e "\nExporting new GPG key to $key_root ..."
    spack gpg export $key_root/${key_user}-key.pub
    spack gpg export --secret $key_root/${key_user}-key.priv
    chmod 640 $key_root/${key_user}-key.*
    echo
}

#
## ---- INITIALIZATION ----
#

# Handle arguments
user_args=( "$@" )
gpg_opt=auto
key_root=/glade/work/$USER/operations/spack-keys
key_user=$(whoami | sed 's/csgteam/csg/')

while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
        -h|--help)
            usage
            ;;
        -b|--spack-branch)
            custom_branch=$2
            ;;
        -k|--key)
            gpg_opt=$2
            ;;
        -m|--no-mirror|--nomirror)
            skip_mirror=yes
            ;;
        -n|--no-pkgs|--nopkgs)
            skip_pkgs=yes
            ;;
        -p|--production)
            my_user=$(whoami)

            if [[ $my_user == csgteam ]]; then
                NCAR_SPACK_DEPLOY_TYPE=production
            else
                >&2 echo "Error: cannot create production deployment as $my_user"
                exit 1
            fi
            ;;
        --set-version)
            custom_version=$2

            if [[ -n $custom_version ]]; then
                tmp_file_path=$(mktemp ${TMPDIR:-/tmp}/ns-cluster.XXXXXXXX)
                shift
            else
                >&2 echo "Error: --set-version requires an argument"
                usage 1
            fi
            ;;
        *)
            export NCAR_SYS=$1
            ;;
    esac

    shift
done

if [[ -z $NCAR_SYS ]]; then
    >&2 echo "Error: deployment configuration must be specified"
    usage 1
elif [[ ! -f $NCAR_SPACK_DEPLOY_DIR/clusters/$NCAR_SYS/main.cfg ]]; then
    >&2 echo "Error: deployment "$NCAR_SYS" not recognized from available options"
    exit 1
fi

# Source cluster settings
if [[ -n $tmp_file_path ]]; then
    settings_file=$tmp_file_path
    sed "s/\(NCAR_SPACK_HOST_VERSION=\).*/\1${custom_version}/" \
        $NCAR_SPACK_DEPLOY_DIR/clusters/$NCAR_SYS/main.cfg > $settings_file
else
    settings_file=${settings_file:-$NCAR_SPACK_DEPLOY_DIR/clusters/$NCAR_SYS/main.cfg}
fi

. $settings_file

# Check if Github repo exists
if [[ -n $NCAR_SPACK_GITHUB ]] && [[ $skip_github != yes ]]; then
    echo -e "Checking status of $NCAR_SPACK_GITHUB ...\n"
    
    if ! git ls-remote -h "$NCAR_SPACK_GITHUB"; then
        exit 1
    fi
fi

# Check key status
if [[ ! $gpg_opt =~ (auto|new|none) ]]; then
    if [[ ! -f $gpg_opt ]]; then
        >&2 echo "Error:  No GPG key found at ${gpg_opt}."
        >&2 echo "        Check input and try again."
        exit 1
    else
        gpg_key=$gpg_opt
    fi
elif [[ $gpg_opt == auto ]]; then
    if [[ -f $key_root/${key_user}-key.priv ]]; then
        gpg_key=$key_root/${key_user}-key.priv
    else
        gpg_opt=new
    fi
fi

#
## ---- INSTALL/CLONE SPACK FOR CLUSTER ----
#

spack_clone_path=$NCAR_SPACK_ROOT_DEPLOYMENT/spack

if [[ $NCAR_SPACK_ROOT != $spack_clone_path ]]; then 
    if [[ -d $NCAR_SPACK_ROOT_DEPLOYMENT ]]; then
        >&2 echo "Error:  Existing deployment found at ${NCAR_SPACK_ROOT_DEPLOYMENT}. Will not"
        >&2 echo -e "        overwrite. Resolve and rerun this script.\n"
        exit 1
    fi

    # Install latest source from GitHub and checkout specified version
    echo "Installing Spack into $spack_clone_path ..."
    git clone -c feature.manyFiles=true git@github.com:NCAR/csg-spack-fork.git $spack_clone_path
    cd $spack_clone_path

    if [[ -n $custom_branch ]]; then
        NCAR_SPACK_CUSTOM_BRANCH=$custom_branch
    fi

    if [[ -n $NCAR_SPACK_CUSTOM_BRANCH ]]; then
        echo -e "\nSwitching to custom branch $NCAR_SPACK_CUSTOM_BRANCH ..."
        git checkout $NCAR_SPACK_CUSTOM_BRANCH
    elif git branch -r | grep -q /$NCAR_SPACK_HOST_VERSION; then
        echo -e "\nSwitching to existing version branch $NCAR_SPACK_HOST_VERSION ..."
        git checkout $NCAR_SPACK_HOST_VERSION
    fi

    # Add original Spack repo as an upstream for checking out recipe updates
    git remote add upstream git@github.com:spack/spack.git

    # Set prompt label in clean_bash script
    sed -i "s/\[clean\]/\[${NCAR_SPACK_HOST}-${NCAR_SPACK_HOST_VERSION}\]/" $spack_clone_path/bin/clean_bash

    # Set different core compiler if requested
    if [[ -n $NCAR_SPACK_GCC_ROOT ]]; then
        sed -i "s|^\(CORE_GCC_ROOT=\)|\1$NCAR_SPACK_GCC_ROOT|" $spack_clone_path/share/ncar/init.sh
    fi

    # If exists, use Spack utils repo for Python
    if [[ -d $NCAR_SPACK_PYTHON_ROOT ]]; then
        sed -i "s|^\(NCAR_SPACK_PYTHON_ROOT=\).*|\1$NCAR_SPACK_PYTHON_ROOT|" $spack_clone_path/share/ncar/init.sh
    fi

    # Add custom cluster source files if found
    if [[ -d $NCAR_SPACK_DEPLOY_DIR/clusters/$NCAR_SYS/src/spack ]]; then
        cp -r $NCAR_SPACK_DEPLOY_DIR/clusters/$NCAR_SYS/src/spack/* $spack_clone_path/
    fi

    if [[ -n $NCAR_SPACK_PYDIR ]]; then
        sed -i "/^env_args=/a NCAR_SPACK_PYDIR=$NCAR_SPACK_PYDIR" $spack_clone_path/bin/clean_bash
    fi

    # Copy any found licenses to Spack install
    if [[ -d $NCAR_SPACK_DEPLOY_DIR/clusters/$NCAR_SYS/licenses ]]; then
        cp -r $NCAR_SPACK_DEPLOY_DIR/clusters/$NCAR_SYS/licenses $spack_clone_path/etc/spack/
    fi

    # Modify permissions according
    chgrp -R csgteam $spack_clone_path
    chmod -R a=rX,u+w $spack_clone_path

    # Activate spack installation
    . $spack_clone_path/share/spack/setup-env.sh

    # Create trusted GPG key in spack install
    if [[ $gpg_opt == new ]]; then
        if [[ $key_user == csg ]]; then
            key_person="NCAR HPC Consulting"
        else
            key_person="$(getent passwd $key_user | awk -F[,:] '{ print $5 }')"
        fi

        echo -e "\nCreating trusted GPG key for build cache creation ..."
        spack gpg create "$key_person" "<$key_user@ucar.edu>"

        if [[ -f $key_root/${key_user}-key.priv ]]; then
            read -p "GPG key already exists. Overwrite (y/N)? " clobber_key
            clobber_key=${clobber_key:-no}

            if [[ yes == ${clobber_key,,}* ]]; then
                echo "Backing up old key ..."
                mkdir $key_root/backup.$NCAR_SPACK_DEPLOY_TIME
                mv $key_root/${key_user}-key.* $key_root/backup.$NCAR_SPACK_DEPLOY_TIME
                export_gpg_key
            fi
        else
            mkdir -p $key_root
            export_gpg_key
        fi
    elif [[ -n $gpg_key ]]; then
        spack gpg trust $gpg_key
    fi

    # Make sure environment is clean
    cd $NCAR_SPACK_DEPLOY_DIR
    $spack_clone_path/bin/clean_bash $0 "${user_args[@]}"
    exit $?
else
    # Activate spack installation
    . $NCAR_SPACK_STARTUP
fi

#
## ---- CREATE AND CUSTOMIZE ENV ----
#

if [[ -d $NCAR_SPACK_ENV_BUILD ]]; then
>&2 cat << EOF
Error:  Existing environment found at ${NCAR_SPACK_ENV_BUILD}. Will not
        overwrite. Resolve and rerun this script.

EOF
exit 1
fi

echo "Creating env at $NCAR_SPACK_ENV_BUILD ..."

# All spack needs for an env is a directory with spack.yaml
mkdir -p $NCAR_SPACK_ENV_BUILD/logs
cp clusters/$NCAR_SYS/spack.yaml $NCAR_SPACK_ENV_BUILD
cp -r src/* $NCAR_SPACK_ENV_BUILD

cat > $NCAR_SPACK_ENV_BUILD/main.cfg << EOF
NCAR_SPACK_DEPLOY_TYPE=$NCAR_SPACK_DEPLOY_TYPE
NCAR_SPACK_DEPLOY_COMMIT=$(git rev-parse HEAD)

EOF

envsubst '$USER,$NCAR_SYS' < $settings_file >> $NCAR_SPACK_ENV_BUILD/main.cfg

if [[ -n $tmp_file_path ]]; then
    rm -f $tmp_file_path
fi

# Override the normal version if set at the command-line
if [[ -n $custom_version ]]; then
    sed -i "s/\(NCAR_SPACK_HOST_VERSION=\).*/\1${custom_version}/" $NCAR_SPACK_ENV_BUILD/main.cfg
fi

cp clusters/$NCAR_SYS/packages.cfg $NCAR_SPACK_ENV_BUILD
cp -r templates $NCAR_SPACK_ENV_BUILD

if [[ -d clusters/$NCAR_SYS/templates ]]; then
    cp -r clusters/$NCAR_SYS/templates $NCAR_SPACK_ENV_BUILD
fi

if [[ -f clusters/$NCAR_SYS/postprocess ]]; then
    cp -L clusters/$NCAR_SYS/postprocess $NCAR_SPACK_ENV_BUILD/bin
fi

# Make cluster-specific substitutions in spack.yaml
sed -i "s|%HOST%|$NCAR_SPACK_HOST|" $NCAR_SPACK_ENV_BUILD/spack.yaml
sed -i "s|%VERSION%|$NCAR_SPACK_HOST_VERSION|" $NCAR_SPACK_ENV_BUILD/spack.yaml
sed -i "s|%DEPLOYMENT%|${NCAR_SPACK_HOST}/$NCAR_SPACK_HOST_VERSION|" $NCAR_SPACK_ENV_BUILD/spack.yaml
sed -i "s|%INSTALLROOT%|${NCAR_SPACK_ENV_BUILD}/opt|" $NCAR_SPACK_ENV_BUILD/spack.yaml
sed -i "s|%MODULESROOT%|${NCAR_SPACK_ENV_BUILD}/modules/$NCAR_SPACK_HOST_VERSION|" $NCAR_SPACK_ENV_BUILD/spack.yaml
sed -i "s|%BASEROOT%|$NCAR_SPACK_ENV_BUILD|" $NCAR_SPACK_ENV_BUILD/spack.yaml
sed -i "s|%TMPROOT%|$NCAR_SPACK_TMPROOT|g" $NCAR_SPACK_ENV_BUILD/spack.yaml

# Activate the environment
spack env activate $NCAR_SPACK_ENV_BUILD
spack env status

# Make sure packages are concretized separately (to allow multiple variants)
spack config add 'concretizer:unify:false'

# Set Spack-version specific bootstrap path to avoid conflicts
spack bootstrap root $NCAR_SPACK_ROOT_BOOTSTRAP

# Add package constraints from initial config file
if [[ -f clusters/$NCAR_SYS/constraints.cfg ]]; then
    cp clusters/$NCAR_SYS/constraints.cfg $NCAR_SPACK_ENV_BUILD
    $NCAR_SPACK_ENV_BUILD/bin/add_constraints
fi

# Detect available external compilers (e.g., Cray compilers)
if [[ ${NCAR_SPACK_DETECT_COMPILERS:-false} == true ]]; then
    spack compiler find
fi

# Create mirrors and prepare env to generate build_cache binaries
if [[ $NCAR_SPACK_PAD_LENGTH != 0 ]]; then
    spack config add "config:install_tree:padded_length:${NCAR_SPACK_PAD_LENGTH:-128}"
fi

if [[ ${skip_mirror:-no} == no ]]; then
    for mtype in LOCAL GLOBAL; do
        mirror_variable=NCAR_SPACK_MIRROR_${mtype}
        mirror=${!mirror_variable}

        if [[ $mirror == /* ]] && [[ ! -d $mirror ]]; then
            if [[ $(sed 's/production/GLOBAL/;s/testing/LOCAL/' <<< $NCAR_SPACK_DEPLOY_TYPE) == $mtype ]]; then
                spack mirror create -d $mirror -a
            fi
        fi

        # Only use S3 as writable cache in production
        if [[ $NCAR_SPACK_DEPLOY_TYPE != production ]]; then
            mirror=$(sed 's|s3://|https://stratus.ucar.edu/|' <<< $mirror)
        fi

        spack mirror add ncar_mirror_${mtype,,} $mirror
    done

    spack buildcache keys --install --trust
fi

# Add custom repos
if [[ -f clusters/$NCAR_SYS/repos.cfg ]]; then
    mkdir -p $SPACK_ENV/repos

    while read -r repo; do
        if [[ -f $NCAR_SPACK_DEPLOY_DIR/repos/$repo/setup.sh ]]; then
            . $NCAR_SPACK_DEPLOY_DIR/repos/$repo/setup.sh
        else
            cp -r $NCAR_SPACK_DEPLOY_DIR/repos/$repo $SPACK_ENV/repos
            mkdir -p $SPACK_ENV/repos/$repo/packages
            spack repo add $SPACK_ENV/repos/$repo
        fi
    done < clusters/$NCAR_SYS/repos.cfg
fi

# Add NCAR templates
spack config add "config:template_dirs:$SPACK_ENV/templates/modules"

#
## ---- BUILD PACKAGES IN ENVIRONMENTS ----
#

if [[ ${skip_pkgs:-no} != yes ]]; then
    echo -e "Building packages in build environment ...\n"
    # Build packages from source in build environment
    cd $NCAR_SPACK_ENV_BUILD
    bin/install_packages

    # Run script to populate the binary build_cache
    if [[ $NCAR_SPACK_PAD_LENGTH != 0 ]]; then
        echo -e "Populating build cache with package binaries ...\n"
        bin/populate_build_cache
    else
        echo "Skipping build cache due to pad length = 0 ..."
    fi

    # Create modules in build environment
    if [[ -n $NCAR_SPACK_ROOT_MODULES ]]; then
        echo "Generating modules in build environment ..."
        spack module lmod refresh -y
    fi

    # Some clusters (e.g., Cray) need to run extra commands to prep environment
    if [[ -f $NCAR_SPACK_ENV_BUILD/bin/postprocess ]]; then
        echo "Running postprocessing on the build environment ..."
        $NCAR_SPACK_ENV_BUILD/bin/postprocess
    fi
fi

spack env deactivate

# Status message
cat << EOF

===========================
    DEPLOYMENT COMPLETE
===========================

Machine:        $NCAR_SYS
Date:           $NCAR_SPACK_DEPLOY_TIME
Type:           $NCAR_SPACK_DEPLOY_TYPE

Spack root:     $SPACK_ROOT
Build root:     $NCAR_SPACK_ENV_BUILD
Public root:    $NCAR_SPACK_ENV_PUBLIC

Github repo:    $NCAR_SPACK_GITHUB

EOF

if [[ ${skip_pkgs:-no} != yes ]]; then
cat << EOF
Install logs:   $NCAR_SPACK_ENV_BUILD/logs/installs.$NCAR_SPACK_DEPLOY_TIME
Caching logs:   $NCAR_SPACK_ENV_BUILD/logs/cache.$NCAR_SPACK_DEPLOY_TIME

EOF
fi

cat << EOF
*** First check that builds in build environment are valid! ***

To install into $NCAR_SPACK_DEPLOY_TYPE public environment, run the following:

$NCAR_SPACK_ENV_BUILD/bin/publish "Initial deployment of environment on $NCAR_SYS"

EOF
